parse-ul-properties: node = (nml:Property (@ (name order)) (nml:Quantity (nml:SingleValue 2500)))
parse-ul-properties: name = order sxml-value = (nml:SingleValue 2500)
eval-source: defs = (Value order = (Apply (Apply Signal.realsig (Const (label order))) (Apply Signal.realconst (Const (real 2500)))))
parse-ul-properties: node = (nml:Property (@ (name Ne)) (nml:Quantity (nml:SingleValue (nml:MathInline 4 * order))))
parse-ul-properties: name = Ne sxml-value = (nml:SingleValue (nml:MathInline 4 * order))
eval-source: defs = (Value Ne = (Apply (Apply Signal.mul (Apply Signal.realconst (Const (real 4.0)))) order))
parse-ul-properties: node = (nml:Property (@ (name Ni)) (nml:Quantity (nml:SingleValue (nml:MathInline 1 * order))))
parse-ul-properties: name = Ni sxml-value = (nml:SingleValue (nml:MathInline 1 * order))
eval-source: defs = (Value Ni = (Apply (Apply Signal.mul (Apply Signal.realconst (Const (real 1.0)))) order))
parse-ul-properties: node = (nml:Property (@ (name epsilon)) (nml:Quantity (nml:SingleValue 0.1)))
parse-ul-properties: name = epsilon sxml-value = (nml:SingleValue 0.1)
eval-source: defs = (Value epsilon = (Apply (Apply Signal.realsig (Const (label epsilon))) (Apply Signal.realconst (Const (real 0.1)))))
parse-ul-properties: node = (nml:Property (@ (name Ce)) (nml:Quantity (nml:SingleValue (nml:MathInline epsilon * Ne))))
parse-ul-properties: name = Ce sxml-value = (nml:SingleValue (nml:MathInline epsilon * Ne))
eval-source: defs = (Value Ce = (Apply (Apply Signal.mul epsilon) Ne))
parse-ul-properties: node = (nml:Property (@ (name Ci)) (nml:Quantity (nml:SingleValue (nml:MathInline epsilon * Ni))))
parse-ul-properties: name = Ci sxml-value = (nml:SingleValue (nml:MathInline epsilon * Ni))
eval-source: defs = (Value Ci = (Apply (Apply Signal.mul epsilon) Ni))
parse-ul-properties: node = (nml:Property (@ (name Cext)) (nml:Quantity (nml:SingleValue (nml:MathInline Ce))))
parse-ul-properties: name = Cext sxml-value = (nml:SingleValue (nml:MathInline Ce))
eval-source: defs = (Value Cext = Ce)
parse-ul-properties: node = (nml:Property (@ (unit ms) (name delay)) (nml:Quantity (nml:SingleValue 1.5)))
parse-ul-properties: name = delay sxml-value = (nml:SingleValue 1.5)
eval-source: defs = (Value delay = (Apply (Apply Signal.realsig (Const (label delay))) (Apply Signal.realconst (Const (real 1.5)))))
parse-ul-properties: node = (nml:Property (@ (unit mV) (name J)) (nml:Quantity (nml:SingleValue 0.1)))
parse-ul-properties: name = J sxml-value = (nml:SingleValue 0.1)
eval-source: defs = (Value J = (Apply (Apply Signal.realsig (Const (label J))) (Apply Signal.realconst (Const (real 0.1)))))
parse-ul-properties: node = (nml:Property (@ (name g)) (nml:Quantity (nml:SingleValue 4.5)))
parse-ul-properties: name = g sxml-value = (nml:SingleValue 4.5)
eval-source: defs = (Value g = (Apply (Apply Signal.realsig (Const (label g))) (Apply Signal.realconst (Const (real 4.5)))))
parse-ul-properties: node = (nml:Property (@ (name eta)) (nml:Quantity (nml:SingleValue 0.9)))
parse-ul-properties: name = eta sxml-value = (nml:SingleValue 0.9)
eval-source: defs = (Value eta = (Apply (Apply Signal.realsig (Const (label eta))) (Apply Signal.realconst (Const (real 0.9)))))
parse-ul-properties: node = (nml:Property (@ (name Je)) (nml:Quantity (nml:SingleValue (nml:MathInline J))))
parse-ul-properties: name = Je sxml-value = (nml:SingleValue (nml:MathInline J))
eval-source: defs = (Value Je = J)
parse-ul-properties: node = (nml:Property (@ (name Ji)) (nml:Quantity (nml:SingleValue (nml:MathInline -g * Je))))
parse-ul-properties: name = Ji sxml-value = (nml:SingleValue (nml:MathInline -g * Je))
eval-source: defs = (Value Ji = (Apply Signal.neg (Apply (Apply Signal.mul g) Je)))
parse-ul-properties: node = (nml:Property (@ (name Jext)) (nml:Quantity (nml:SingleValue (nml:MathInline Je))))
parse-ul-properties: name = Jext sxml-value = (nml:SingleValue (nml:MathInline Je))
eval-source: defs = (Value Jext = Je)
parse-ul-properties: node = (nml:Property (@ (unit mV) (name theta)) (nml:Quantity (nml:SingleValue 20.0)))
parse-ul-properties: name = theta sxml-value = (nml:SingleValue 20.0)
eval-source: defs = (Value theta = (Apply (Apply Signal.realsig (Const (label theta))) (Apply Signal.realconst (Const (real 20.0)))))
parse-ul-properties: node = (nml:Property (@ (unit ms) (name tau)) (nml:Quantity (nml:SingleValue 20.0)))
parse-ul-properties: name = tau sxml-value = (nml:SingleValue 20.0)
eval-source: defs = (Value tau = (Apply (Apply Signal.realsig (Const (label tau))) (Apply Signal.realconst (Const (real 20.0)))))
parse-ul-properties: node = (nml:Property (@ (name nu_thresh)) (nml:Quantity (nml:SingleValue (nml:MathInline theta / (Je * Ce * tau)))))
parse-ul-properties: name = nu_thresh sxml-value = (nml:SingleValue (nml:MathInline theta / (Je * Ce * tau)))
eval-source: defs = (Value nu_thresh = (Apply (Apply Signal.div theta) (Apply (Apply Signal.mul (Apply (Apply Signal.mul Je) Ce)) tau)))
parse-ul-properties: node = (nml:Property (@ (name nu_ext)) (nml:Quantity (nml:SingleValue (nml:MathInline eta * nu_thresh))))
parse-ul-properties: name = nu_ext sxml-value = (nml:SingleValue (nml:MathInline eta * nu_thresh))
eval-source: defs = (Value nu_ext = (Apply (Apply Signal.mul eta) nu_thresh))
parse-ul-properties: node = (nml:Property (@ (unit Hz) (name input_rate)) (nml:Quantity (nml:SingleValue (nml:MathInline 1000.0 * nu_ext))))
parse-ul-properties: name = input_rate sxml-value = (nml:SingleValue (nml:MathInline 1000.0 * nu_ext))
eval-source: defs = (Value input_rate = (Apply (Apply Signal.mul (Apply Signal.realconst (Const (real 1000.0)))) nu_ext))
parse-ul-properties: node = (nml:Property (@ (name timestep)) (nml:Quantity (nml:SingleValue 0.2)))
parse-ul-properties: name = timestep sxml-value = (nml:SingleValue 0.2)
eval-source: defs = (Value timestep = (Apply (Apply Signal.realsig (Const (label timestep))) (Apply Signal.realconst (Const (real 0.2)))))
parse-ul-properties: entry = (<order> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label order))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 2500))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = order value = (realsig order (realconst 2500.0))
parse-ul-properties: name = order val = (realsig order (realconst 2500.0))
parse-ul-properties: entry = (<Ne> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 4.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label order))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 2500))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = Ne value = (* (realconst 4.0) (realsig order (realconst 2500.0)))
parse-ul-properties: name = Ne val = (* (realconst 4.0) (realsig order (realconst 2500.0)))
parse-ul-properties: entry = (<Ni> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 1.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label order))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 2500))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = Ni value = (* (realconst 1.0) (realsig order (realconst 2500.0)))
parse-ul-properties: name = Ni val = (* (realconst 1.0) (realsig order (realconst 2500.0)))
parse-ul-properties: entry = (<epsilon> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label epsilon))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = epsilon value = (realsig epsilon (realconst 0.1))
parse-ul-properties: name = epsilon val = (realsig epsilon (realconst 0.1))
parse-ul-properties: entry = (<Ce> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label epsilon))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 4.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label order))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 2500))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = Ce value = (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))
parse-ul-properties: name = Ce val = (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))
parse-ul-properties: entry = (<Ci> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label epsilon))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 1.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label order))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 2500))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = Ci value = (* (realsig epsilon (realconst 0.1)) (* (realconst 1.0) (realsig order (realconst 2500.0))))
parse-ul-properties: name = Ci val = (* (realsig epsilon (realconst 0.1)) (* (realconst 1.0) (realsig order (realconst 2500.0))))
parse-ul-properties: entry = (<Cext> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label epsilon))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 4.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label order))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 2500))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = Cext value = (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))
parse-ul-properties: name = Cext val = (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))
parse-ul-properties: entry = (<delay> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label delay))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 1.5))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = delay value = (realsig delay (realconst 1.5))
parse-ul-properties: name = delay val = (realsig delay (realconst 1.5))
parse-ul-properties: entry = (<J> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label J))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = J value = (realsig J (realconst 0.1))
parse-ul-properties: name = J val = (realsig J (realconst 0.1))
parse-ul-properties: entry = (<g> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label g))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 4.5))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = g value = (realsig g (realconst 4.5))
parse-ul-properties: name = g val = (realsig g (realconst 4.5))
parse-ul-properties: entry = (<eta> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label eta))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.9))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = eta value = (realsig eta (realconst 0.9))
parse-ul-properties: name = eta val = (realsig eta (realconst 0.9))
parse-ul-properties: entry = (<Je> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label J))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = Je value = (realsig J (realconst 0.1))
parse-ul-properties: name = Je val = (realsig J (realconst 0.1))
parse-ul-properties: entry = (<Ji> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label neg))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label g))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 4.5))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label J))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>)
parse-property-hook: label = sigfun name = Ji value = (neg (* (realsig g (realconst 4.5)) (realsig J (realconst 0.1))))
parse-ul-properties: name = Ji val = (neg (* (realsig g (realconst 4.5)) (realsig J (realconst 0.1))))
parse-ul-properties: entry = (<Jext> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label J))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = Jext value = (realsig J (realconst 0.1))
parse-ul-properties: name = Jext val = (realsig J (realconst 0.1))
parse-ul-properties: entry = (<theta> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label theta))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 20.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = theta value = (realsig theta (realconst 20.0))
parse-ul-properties: name = theta val = (realsig theta (realconst 20.0))
parse-ul-properties: entry = (<tau> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label tau))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 20.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = tau value = (realsig tau (realconst 20.0))
parse-ul-properties: name = tau val = (realsig tau (realconst 20.0))
parse-ul-properties: entry = (<nu_thresh> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label /))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label theta))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 20.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label J))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label epsilon))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 4.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label order))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 2500))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label tau))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 20.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = nu_thresh value = (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0))))
parse-ul-properties: name = nu_thresh val = (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0))))
parse-ul-properties: entry = (<nu_ext> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label eta))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.9))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label /))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label theta))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 20.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label J))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label epsilon))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 4.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label order))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 2500))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label tau))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 20.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = nu_ext value = (* (realsig eta (realconst 0.9)) (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0)))))
parse-ul-properties: name = nu_ext val = (* (realsig eta (realconst 0.9)) (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0)))))
parse-ul-properties: entry = (<input_rate> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 1000.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label eta))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.9))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label /))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label theta))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 20.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label J))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label epsilon))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.1))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label *))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 4.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label order))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 2500))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label tau))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 20.0))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = input_rate value = (* (realconst 1000.0) (* (realsig eta (realconst 0.9)) (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0))))))
parse-ul-properties: name = input_rate val = (* (realconst 1000.0) (* (realsig eta (realconst 0.9)) (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0))))))
parse-ul-properties: entry = (<timestep> . #<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realsig))> . #<MLvalue (Tuple (#<MLvalue (Const (label timestep))> . #<MLvalue (Tuple (#<MLvalue (Tuple (#<MLvalue (Const (label sigfun))> . #<MLvalue (Tuple (#<MLvalue (Const (label realconst))> . #<MLvalue (Tuple (#<MLvalue (Const (real 0.2))> . #<MLvalue (Tuple ())>))>))>))> . #<MLvalue (Tuple ())>))>))>))>))>)
parse-property-hook: label = sigfun name = timestep value = (realsig timestep (realconst 0.2))
parse-ul-properties: name = timestep val = (realsig timestep (realconst 0.2))
NineML abstraction layer URI: #<<URI>>
NineML component propns: ((name tau) (name tau_rp) (name Vreset) (name R))
NineML component propvs: ((nml:SingleValue 20.0) (nml:SingleValue 2.0) (nml:SingleValue 10.0) (nml:SingleValue 100.0))
NineML component fieldns: ((name theta))
NineML component fieldvs: ((nml:SingleValue (nml:MathInline theta + random.normal ())))
NineML abstraction layer source: <?xml version='1.0' encoding='UTF-8'?>
<NineML xmlns="http://nineml.incf.org/9ML/0.3"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://nineml.incf.org/9ML/0.3 ../NineML_v0.3.xsd">

  <ComponentClass name="BrunelIaF">

    <Parameter name="tau" dimension='time'/>       <!-- membrane constant -->
    <Parameter name="theta" dimension='voltage'/>  <!-- firing threshold -->
    <Parameter name="tau_rp" dimension='time'/>    <!-- refractory period -->
    <Parameter name="Vreset" dimension='voltage'/> <!-- reset potential -->
    <Parameter name="R" dimension='resistance'/>   <!-- membrane resistance -->

    <AnalogReducePort name="Isyn" reduce_op="+" dimension='current'/>
    <AnalogSendPort name="V" dimension='voltage'/>
    <AnalogSendPort name="t_rpend" dimension='time'/>

    <EventSendPort name="spikeOutput"/>
    <EventSendPort name="refractoryEnd"/>

    <Dynamics>

        <StateVariable name="V" dimension="voltage"/>
        <StateVariable name="t_rpend" dimension="time"/>

        <Regime name="subthresholdRegime">
          
          <TimeDerivative variable="V">
            <MathInline> ( - V + (R * Isyn)) / tau </MathInline>
          </TimeDerivative>

          <OnCondition target_regime="refractoryRegime">
            
            <Trigger>
              <MathInline>V &gt;= theta </MathInline>
            </Trigger>
            
            <StateAssignment variable="t_rpend" >
              <MathInline> t + tau_rp </MathInline>
            </StateAssignment>
            
            <StateAssignment variable="V" >
              <MathInline> Vreset </MathInline>
            </StateAssignment>
            
            <EventOut port="spikeOutput" />
            
          </OnCondition>
          
        </Regime>
          
        <Regime name="refractoryRegime" >
            
          <TimeDerivative variable="V" >
            <MathInline> 0.0 </MathInline>
          </TimeDerivative>

          <OnCondition target_regime="subthresholdRegime">
            
            <Trigger>
              <MathInline>t &gt; t_rpend </MathInline>
            </Trigger>
            
            <EventOut port="refractoryEnd" />
            
          </OnCondition>
          
        </Regime>
          
    </Dynamics>

  </ComponentClass>
</NineML>

eval-source: defs = (Value BrunelIaF = (Function <tau> (Function <theta> (Function <tau_rp> (Function <Vreset> (Function <R> (Function <Isyn> (Function <V> (Function <t_rpend> (Function <spikeOutput> (Function <refractoryEnd> (Function <V> (Function <t_rpend> (Function <t> (Function <h> (Apply (Apply Diagram.SEQUENCE (Apply (Apply (Apply (Apply (Apply (Apply (Apply Diagram.RTRANSITION (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply (Apply Signal.div (Apply (Apply Signal.add (Apply Signal.neg V)) (Apply (Apply Signal.mul R) Isyn))) tau)))) (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub V) theta)))) (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label refractoryEnd))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_rpend)))) (Apply (Apply Signal.boolsig (Const (label st117))) (Apply Signal.boolconst (Const (bool #f)))))) (Apply (Apply Diagram.ON (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t_rpend))) (Apply (Apply cons (Const (label V))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) tau_rp))) (Apply Diagram.PURE Vreset)))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0)))))))))))))))))))))
NineML abstraction layer uenv: (((Value BrunelIaF = (Function <tau> (Function <theta> (Function <tau_rp> (Function <Vreset> (Function <R> (Function <Isyn> (Function <V> (Function <t_rpend> (Function <spikeOutput> (Function <refractoryEnd> (Function <V> (Function <t_rpend> (Function <t> (Function <h> (Apply (Apply Diagram.SEQUENCE (Apply (Apply (Apply (Apply (Apply (Apply (Apply Diagram.RTRANSITION (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply (Apply Signal.div (Apply (Apply Signal.add (Apply Signal.neg V)) (Apply (Apply Signal.mul R) Isyn))) tau)))) (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub V) theta)))) (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label refractoryEnd))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_rpend)))) (Apply (Apply Signal.boolsig (Const (label st117))) (Apply Signal.boolconst (Const (bool #f)))))) (Apply (Apply Diagram.ON (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t_rpend))) (Apply (Apply cons (Const (label V))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) tau_rp))) (Apply Diagram.PURE Vreset)))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))))))))))))))))))) ((<BrunelIaF> . (val <BrunelIaF>
     :
     Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> 't2 -> 't3 -> 't4 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram)
)) ((<BrunelIaF> . #<MLvalue (Closure (Function <tau> (Function <theta> (Function <tau_rp> (Function <Vreset> (Function <R> (Function <Isyn> (Function <V> (Function <t_rpend> (Function <spikeOutput> (Function <refractoryEnd> (Function <V> (Function <t_rpend> (Function <t> (Function <h> (Apply (Apply Diagram.SEQUENCE (Apply (Apply (Apply (Apply (Apply (Apply (Apply Diagram.RTRANSITION (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply (Apply Signal.div (Apply (Apply Signal.add (Apply Signal.neg V)) (Apply (Apply Signal.mul R) Isyn))) tau)))) (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub V) theta)))) (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label refractoryEnd))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_rpend)))) (Apply (Apply Signal.boolsig (Const (label st117))) (Apply Signal.boolconst (Const (bool #f)))))) (Apply (Apply Diagram.ON (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t_rpend))) (Apply (Apply cons (Const (label V))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) tau_rp))) (Apply Diagram.PURE Vreset)))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0)))))))))))))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>))) (#<scoping-table> ((<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> 't2 -> 't3 -> 't4 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<timestep> . <Value Signal.sigfun>) (<input_rate> . <Value Signal.sigfun>) (<nu_ext> . <Value Signal.sigfun>) (<nu_thresh> . <Value Signal.sigfun>) (<tau> . <Value Signal.sigfun>) (<theta> . <Value Signal.sigfun>) (<Jext> . <Value Signal.sigfun>) (<Ji> . <Value Signal.sigfun>) (<Je> . <Value Signal.sigfun>) (<eta> . <Value Signal.sigfun>) (<g> . <Value Signal.sigfun>) (<J> . <Value Signal.sigfun>) (<delay> . <Value Signal.sigfun>) (<Cext> . <Value Signal.sigfun>) (<Ci> . <Value Signal.sigfun>) (<Ce> . <Value Signal.sigfun>) (<epsilon> . <Value Signal.sigfun>) (<Ni> . <Value Signal.sigfun>) (<Ne> . <Value Signal.sigfun>) (<order> . <Value Signal.sigfun>) (<AlgebraicSystem> . <Module (sig (type <alsys> = #<typedecl>)

     (val <EQUATION> : label -> Signal.sigfun -> alsys)

     (val <RELATION> : label -> label -> Signal.sigfun -> alsys -> alsys)

     (val <UNION> : alsys -> alsys -> alsys)
)
>) (<IVP> . <Module (sig (type <ivp> = #<typedecl>)

     (val <initial> : Diagram.diagram -> label -> label -> ivp)

     (val <run> : Diagram.diagram -> label -> label -> real -> real -> ivp)
)
>) (<Diagram> . <Module (sig (type <pure> = #<typedecl>)

     (type <diagram> = #<typedecl>)

     (val <IDENTITY> : diagram -> diagram)

     (val <SENSE> : (label) list -> diagram -> diagram)

     (val <ACTUATE> : (label) list -> diagram -> diagram)

     (val <ASSIGN> : (label) list -> pure -> diagram)

     (val <ODE>
     :
     (Signal.sigfun) list -> Signal.sigfun -> Signal.sigfun -> pure -> diagram)

     (val <PURE> : Signal.sigfun -> pure)

     (val <GROUP> : pure -> pure -> pure)

     (val <RELATION> : label -> label -> Signal.sigfun -> pure -> pure)

     (val <SEQUENCE> : diagram -> diagram -> diagram)

     (val <UNION> : diagram -> diagram -> diagram)

     (val <TRANSIENT> : diagram -> diagram -> Signal.sigfun -> diagram -> diagram)

     (val <ON> : diagram -> Signal.sigfun -> diagram)

     (val <RTRANSITION>
     :
     diagram -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram)
)
>) (<Signal> . <Module (sig (type <sigfun> = #<typedecl>)

     (val <signal> : label -> sigfun)

     (val <relation> : label -> sigfun -> sigfun)

     (val <realconst> : real -> sigfun)

     (val <boolconst> : bool -> sigfun)

     (val <realparam> : label -> sigfun -> sigfun)

     (val <realsig> : label -> sigfun -> sigfun)

     (val <realfield> : label -> sigfun -> sigfun)

     (val <boolsig> : label -> sigfun -> sigfun)

     (val <if> : sigfun -> sigfun -> sigfun -> sigfun)

     (val <add> : sigfun -> sigfun -> sigfun)

     (val <sub> : sigfun -> sigfun -> sigfun)

     (val <mul> : sigfun -> sigfun -> sigfun)

     (val <div> : sigfun -> sigfun -> sigfun)

     (val <gte> : sigfun -> sigfun -> sigfun)

     (val <lte> : sigfun -> sigfun -> sigfun)

     (val <gt> : sigfun -> sigfun -> sigfun)

     (val <lt> : sigfun -> sigfun -> sigfun)

     (val <neg> : sigfun -> sigfun)

     (val <log> : sigfun -> sigfun)

     (val <ln> : sigfun -> sigfun)

     (val <cosh> : sigfun -> sigfun)

     (val <tanh> : sigfun -> sigfun)

     (val <exp> : sigfun -> sigfun)
)
>) (<Random> . <Module (sig (val <exponential> : Signal.sigfun -> Signal.sigfun)

     (val <uniform> : bot -> Signal.sigfun)

     (val <normal> : bot -> Signal.sigfun)
)
>) (<Real> . <Module (sig (val <PI> : real)

     (val <add> : real -> real -> real)

     (val <sub> : real -> real -> real)

     (val <mul> : real -> real -> real)

     (val <div> : real -> real -> real)

     (val <gte> : real -> real -> bool)

     (val <lte> : real -> real -> bool)

     (val <gt> : real -> real -> bool)

     (val <lt> : real -> real -> bool)

     (val <neg> : real -> real)

     (val <log> : real -> real)

     (val <ln> : real -> real)

     (val <sin> : real -> real)

     (val <cos> : real -> real)

     (val <cosh> : real -> real)

     (val <tanh> : real -> real)

     (val <exp> : real -> real)

     (val <toNat> : real -> nat)
)
>) (<cond> . <Value bool -> 't1 -> 't2 -> 't3>) (<tail> . <Value ('t1) list -> ('t2) list>) (<head> . <Value ('t1) list -> 't2>) (<cons> . <Value 't1 -> ('t2) list -> ('t3) list>) (<null> . <Value ('t1) list>) (<snd> . <Value 't1 * 't2 -> 't3>) (<fst> . <Value 't1 * 't2 -> 't3>) (<pair> . <Value 't1 -> 't2 -> 't3 * 't4>) (<>=> . <Value nat -> nat -> bool>) (<>> . <Value nat -> nat -> bool>) (<<=> . <Value nat -> nat -> bool>) (<<> . <Value nat -> nat -> bool>) (<<>> . <Value nat -> nat -> bool>) (<==> . <Value nat -> nat -> bool>) (<div> . <Value nat -> nat -> nat>) (<mul> . <Value nat -> nat -> nat>) (<sub> . <Value nat -> nat -> nat>) (<add> . <Value nat -> nat -> nat>) (<empty> . <Value bot>) (<true> . <Value bool>) (<false> . <Value bool>) (<nat> . <Type #<typedecl>>) (<bot> . <Type #<typedecl>>) (<string> . <Type #<typedecl>>) (<label> . <Type #<typedecl>>) (<bool> . <Type #<typedecl>>) (<real> . <Type #<typedecl>>) (<list> . <Type #<typedecl>>) (<*> . <Type #<typedecl>>) (<->> . <Type #<typedecl>>))))
NineML abstraction layer value: (<BrunelIaF> . #<MLvalue (Closure (Function <tau> (Function <theta> (Function <tau_rp> (Function <Vreset> (Function <R> (Function <Isyn> (Function <V> (Function <t_rpend> (Function <spikeOutput> (Function <refractoryEnd> (Function <V> (Function <t_rpend> (Function <t> (Function <h> (Apply (Apply Diagram.SEQUENCE (Apply (Apply (Apply (Apply (Apply (Apply (Apply Diagram.RTRANSITION (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply (Apply Signal.div (Apply (Apply Signal.add (Apply Signal.neg V)) (Apply (Apply Signal.mul R) Isyn))) tau)))) (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub V) theta)))) (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label refractoryEnd))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_rpend)))) (Apply (Apply Signal.boolsig (Const (label st117))) (Apply Signal.boolconst (Const (bool #f)))))) (Apply (Apply Diagram.ON (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t_rpend))) (Apply (Apply cons (Const (label V))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) tau_rp))) (Apply Diagram.PURE Vreset)))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0)))))))))))))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>)
NineML abstraction layer entry type: Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> 't2 -> 't3 -> 't4 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram
NineML abstraction layer return type: Diagram.diagram
NineML abstraction layer formals: (tau theta tau_rp Vreset R Isyn V t_rpend spikeOutput refractoryEnd V t_rpend t h) property-values: ((tau . (Apply (Apply Signal.realparam (Const (label tau))) (Apply Signal.realconst (Const (real 20.0))))) (tau_rp . (Apply (Apply Signal.realparam (Const (label tau_rp))) (Apply Signal.realconst (Const (real 2.0))))) (Vreset . (Apply (Apply Signal.realparam (Const (label Vreset))) (Apply Signal.realconst (Const (real 10.0))))) (R . (Apply (Apply Signal.realparam (Const (label R))) (Apply Signal.realconst (Const (real 100.0)))))) field-values: ((theta . (Apply (Apply Signal.realfield (Const (label theta))) (Apply (Apply Signal.add theta) (Apply Random.normal empty))))) initial-values: ((Isyn . (Apply (Apply Signal.realsig (Const (label Isyn))) (Apply Signal.realconst (Const (real 0.0))))) (V . (Apply (Apply Signal.realsig (Const (label V))) (Apply Random.uniform empty))) (t_rpend . (Apply (Apply Signal.realsig (Const (label t_rpend))) (Apply Signal.realconst (Const (real 0.0))))) (spikeOutput . (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (refractoryEnd . (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0)))))) return-type: Diagram.diagram
NineML abstraction layer current scope: #<scoping-table>
NineML abstraction layer entry: <BrunelIaF>
NineML ivp: Value ivp_E = (Apply (Apply (Apply IVP.initial E) (Const (label t))) (Const (label h)))
eval-source: defs = (Value E = (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply BrunelIaF (Apply (Apply Signal.realparam (Const (label tau))) (Apply Signal.realconst (Const (real 20.0))))) (Apply (Apply Signal.realfield (Const (label theta))) (Apply (Apply Signal.add theta) (Apply Random.normal empty)))) (Apply (Apply Signal.realparam (Const (label tau_rp))) (Apply Signal.realconst (Const (real 2.0))))) (Apply (Apply Signal.realparam (Const (label Vreset))) (Apply Signal.realconst (Const (real 10.0))))) (Apply (Apply Signal.realparam (Const (label R))) (Apply Signal.realconst (Const (real 100.0))))) (Apply (Apply Signal.realsig (Const (label Isyn))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label V))) (Apply Random.uniform empty))) (Apply (Apply Signal.realsig (Const (label t_rpend))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Signal.realsig (Const (label V))) (Apply Random.uniform empty))) (Apply (Apply Signal.realsig (Const (label t_rpend))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label t))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label h))) (Apply Signal.realconst (Const (real 0.1))))) Value ivp_E = (Apply (Apply (Apply IVP.initial E) (Const (label t))) (Const (label h))))
NineML abstraction layer URI: #<<URI>>
NineML component propns: ((name tau) (name tau_rp) (name Vreset) (name R))
NineML component propvs: ((nml:SingleValue 20.0) (nml:SingleValue 2.0) (nml:SingleValue 10.0) (nml:SingleValue 100.0))
NineML component fieldns: ((name theta))
NineML component fieldvs: ((nml:SingleValue (nml:MathInline theta + random.normal ())))
NineML abstraction layer source: <?xml version='1.0' encoding='UTF-8'?>
<NineML xmlns="http://nineml.incf.org/9ML/0.3"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://nineml.incf.org/9ML/0.3 ../NineML_v0.3.xsd">

  <ComponentClass name="BrunelIaF">

    <Parameter name="tau" dimension='time'/>       <!-- membrane constant -->
    <Parameter name="theta" dimension='voltage'/>  <!-- firing threshold -->
    <Parameter name="tau_rp" dimension='time'/>    <!-- refractory period -->
    <Parameter name="Vreset" dimension='voltage'/> <!-- reset potential -->
    <Parameter name="R" dimension='resistance'/>   <!-- membrane resistance -->

    <AnalogReducePort name="Isyn" reduce_op="+" dimension='current'/>
    <AnalogSendPort name="V" dimension='voltage'/>
    <AnalogSendPort name="t_rpend" dimension='time'/>

    <EventSendPort name="spikeOutput"/>
    <EventSendPort name="refractoryEnd"/>

    <Dynamics>

        <StateVariable name="V" dimension="voltage"/>
        <StateVariable name="t_rpend" dimension="time"/>

        <Regime name="subthresholdRegime">
          
          <TimeDerivative variable="V">
            <MathInline> ( - V + (R * Isyn)) / tau </MathInline>
          </TimeDerivative>

          <OnCondition target_regime="refractoryRegime">
            
            <Trigger>
              <MathInline>V &gt;= theta </MathInline>
            </Trigger>
            
            <StateAssignment variable="t_rpend" >
              <MathInline> t + tau_rp </MathInline>
            </StateAssignment>
            
            <StateAssignment variable="V" >
              <MathInline> Vreset </MathInline>
            </StateAssignment>
            
            <EventOut port="spikeOutput" />
            
          </OnCondition>
          
        </Regime>
          
        <Regime name="refractoryRegime" >
            
          <TimeDerivative variable="V" >
            <MathInline> 0.0 </MathInline>
          </TimeDerivative>

          <OnCondition target_regime="subthresholdRegime">
            
            <Trigger>
              <MathInline>t &gt; t_rpend </MathInline>
            </Trigger>
            
            <EventOut port="refractoryEnd" />
            
          </OnCondition>
          
        </Regime>
          
    </Dynamics>

  </ComponentClass>
</NineML>

eval-source: defs = (Value BrunelIaF = (Function <tau> (Function <theta> (Function <tau_rp> (Function <Vreset> (Function <R> (Function <Isyn> (Function <V> (Function <t_rpend> (Function <spikeOutput> (Function <refractoryEnd> (Function <V> (Function <t_rpend> (Function <t> (Function <h> (Apply (Apply Diagram.SEQUENCE (Apply (Apply (Apply (Apply (Apply (Apply (Apply Diagram.RTRANSITION (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply (Apply Signal.div (Apply (Apply Signal.add (Apply Signal.neg V)) (Apply (Apply Signal.mul R) Isyn))) tau)))) (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub V) theta)))) (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label refractoryEnd))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_rpend)))) (Apply (Apply Signal.boolsig (Const (label st118))) (Apply Signal.boolconst (Const (bool #f)))))) (Apply (Apply Diagram.ON (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t_rpend))) (Apply (Apply cons (Const (label V))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) tau_rp))) (Apply Diagram.PURE Vreset)))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0)))))))))))))))))))))
NineML abstraction layer uenv: (((Value BrunelIaF = (Function <tau> (Function <theta> (Function <tau_rp> (Function <Vreset> (Function <R> (Function <Isyn> (Function <V> (Function <t_rpend> (Function <spikeOutput> (Function <refractoryEnd> (Function <V> (Function <t_rpend> (Function <t> (Function <h> (Apply (Apply Diagram.SEQUENCE (Apply (Apply (Apply (Apply (Apply (Apply (Apply Diagram.RTRANSITION (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply (Apply Signal.div (Apply (Apply Signal.add (Apply Signal.neg V)) (Apply (Apply Signal.mul R) Isyn))) tau)))) (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub V) theta)))) (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label refractoryEnd))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_rpend)))) (Apply (Apply Signal.boolsig (Const (label st118))) (Apply Signal.boolconst (Const (bool #f)))))) (Apply (Apply Diagram.ON (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t_rpend))) (Apply (Apply cons (Const (label V))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) tau_rp))) (Apply Diagram.PURE Vreset)))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))))))))))))))))))) ((<BrunelIaF> . (val <BrunelIaF>
     :
     Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> 't2 -> 't3 -> 't4 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram)
)) ((<BrunelIaF> . #<MLvalue (Closure (Function <tau> (Function <theta> (Function <tau_rp> (Function <Vreset> (Function <R> (Function <Isyn> (Function <V> (Function <t_rpend> (Function <spikeOutput> (Function <refractoryEnd> (Function <V> (Function <t_rpend> (Function <t> (Function <h> (Apply (Apply Diagram.SEQUENCE (Apply (Apply (Apply (Apply (Apply (Apply (Apply Diagram.RTRANSITION (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply (Apply Signal.div (Apply (Apply Signal.add (Apply Signal.neg V)) (Apply (Apply Signal.mul R) Isyn))) tau)))) (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub V) theta)))) (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label refractoryEnd))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_rpend)))) (Apply (Apply Signal.boolsig (Const (label st118))) (Apply Signal.boolconst (Const (bool #f)))))) (Apply (Apply Diagram.ON (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t_rpend))) (Apply (Apply cons (Const (label V))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) tau_rp))) (Apply Diagram.PURE Vreset)))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0)))))))))))))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>))) (#<scoping-table> ((<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> 't2 -> 't3 -> 't4 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<timestep> . <Value Signal.sigfun>) (<input_rate> . <Value Signal.sigfun>) (<nu_ext> . <Value Signal.sigfun>) (<nu_thresh> . <Value Signal.sigfun>) (<tau> . <Value Signal.sigfun>) (<theta> . <Value Signal.sigfun>) (<Jext> . <Value Signal.sigfun>) (<Ji> . <Value Signal.sigfun>) (<Je> . <Value Signal.sigfun>) (<eta> . <Value Signal.sigfun>) (<g> . <Value Signal.sigfun>) (<J> . <Value Signal.sigfun>) (<delay> . <Value Signal.sigfun>) (<Cext> . <Value Signal.sigfun>) (<Ci> . <Value Signal.sigfun>) (<Ce> . <Value Signal.sigfun>) (<epsilon> . <Value Signal.sigfun>) (<Ni> . <Value Signal.sigfun>) (<Ne> . <Value Signal.sigfun>) (<order> . <Value Signal.sigfun>) (<AlgebraicSystem> . <Module (sig (type <alsys> = #<typedecl>)

     (val <EQUATION> : label -> Signal.sigfun -> alsys)

     (val <RELATION> : label -> label -> Signal.sigfun -> alsys -> alsys)

     (val <UNION> : alsys -> alsys -> alsys)
)
>) (<IVP> . <Module (sig (type <ivp> = #<typedecl>)

     (val <initial> : Diagram.diagram -> label -> label -> ivp)

     (val <run> : Diagram.diagram -> label -> label -> real -> real -> ivp)
)
>) (<Diagram> . <Module (sig (type <pure> = #<typedecl>)

     (type <diagram> = #<typedecl>)

     (val <IDENTITY> : diagram -> diagram)

     (val <SENSE> : (label) list -> diagram -> diagram)

     (val <ACTUATE> : (label) list -> diagram -> diagram)

     (val <ASSIGN> : (label) list -> pure -> diagram)

     (val <ODE>
     :
     (Signal.sigfun) list -> Signal.sigfun -> Signal.sigfun -> pure -> diagram)

     (val <PURE> : Signal.sigfun -> pure)

     (val <GROUP> : pure -> pure -> pure)

     (val <RELATION> : label -> label -> Signal.sigfun -> pure -> pure)

     (val <SEQUENCE> : diagram -> diagram -> diagram)

     (val <UNION> : diagram -> diagram -> diagram)

     (val <TRANSIENT> : diagram -> diagram -> Signal.sigfun -> diagram -> diagram)

     (val <ON> : diagram -> Signal.sigfun -> diagram)

     (val <RTRANSITION>
     :
     diagram -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram)
)
>) (<Signal> . <Module (sig (type <sigfun> = #<typedecl>)

     (val <signal> : label -> sigfun)

     (val <relation> : label -> sigfun -> sigfun)

     (val <realconst> : real -> sigfun)

     (val <boolconst> : bool -> sigfun)

     (val <realparam> : label -> sigfun -> sigfun)

     (val <realsig> : label -> sigfun -> sigfun)

     (val <realfield> : label -> sigfun -> sigfun)

     (val <boolsig> : label -> sigfun -> sigfun)

     (val <if> : sigfun -> sigfun -> sigfun -> sigfun)

     (val <add> : sigfun -> sigfun -> sigfun)

     (val <sub> : sigfun -> sigfun -> sigfun)

     (val <mul> : sigfun -> sigfun -> sigfun)

     (val <div> : sigfun -> sigfun -> sigfun)

     (val <gte> : sigfun -> sigfun -> sigfun)

     (val <lte> : sigfun -> sigfun -> sigfun)

     (val <gt> : sigfun -> sigfun -> sigfun)

     (val <lt> : sigfun -> sigfun -> sigfun)

     (val <neg> : sigfun -> sigfun)

     (val <log> : sigfun -> sigfun)

     (val <ln> : sigfun -> sigfun)

     (val <cosh> : sigfun -> sigfun)

     (val <tanh> : sigfun -> sigfun)

     (val <exp> : sigfun -> sigfun)
)
>) (<Random> . <Module (sig (val <exponential> : Signal.sigfun -> Signal.sigfun)

     (val <uniform> : bot -> Signal.sigfun)

     (val <normal> : bot -> Signal.sigfun)
)
>) (<Real> . <Module (sig (val <PI> : real)

     (val <add> : real -> real -> real)

     (val <sub> : real -> real -> real)

     (val <mul> : real -> real -> real)

     (val <div> : real -> real -> real)

     (val <gte> : real -> real -> bool)

     (val <lte> : real -> real -> bool)

     (val <gt> : real -> real -> bool)

     (val <lt> : real -> real -> bool)

     (val <neg> : real -> real)

     (val <log> : real -> real)

     (val <ln> : real -> real)

     (val <sin> : real -> real)

     (val <cos> : real -> real)

     (val <cosh> : real -> real)

     (val <tanh> : real -> real)

     (val <exp> : real -> real)

     (val <toNat> : real -> nat)
)
>) (<cond> . <Value bool -> 't1 -> 't2 -> 't3>) (<tail> . <Value ('t1) list -> ('t2) list>) (<head> . <Value ('t1) list -> 't2>) (<cons> . <Value 't1 -> ('t2) list -> ('t3) list>) (<null> . <Value ('t1) list>) (<snd> . <Value 't1 * 't2 -> 't3>) (<fst> . <Value 't1 * 't2 -> 't3>) (<pair> . <Value 't1 -> 't2 -> 't3 * 't4>) (<>=> . <Value nat -> nat -> bool>) (<>> . <Value nat -> nat -> bool>) (<<=> . <Value nat -> nat -> bool>) (<<> . <Value nat -> nat -> bool>) (<<>> . <Value nat -> nat -> bool>) (<==> . <Value nat -> nat -> bool>) (<div> . <Value nat -> nat -> nat>) (<mul> . <Value nat -> nat -> nat>) (<sub> . <Value nat -> nat -> nat>) (<add> . <Value nat -> nat -> nat>) (<empty> . <Value bot>) (<true> . <Value bool>) (<false> . <Value bool>) (<nat> . <Type #<typedecl>>) (<bot> . <Type #<typedecl>>) (<string> . <Type #<typedecl>>) (<label> . <Type #<typedecl>>) (<bool> . <Type #<typedecl>>) (<real> . <Type #<typedecl>>) (<list> . <Type #<typedecl>>) (<*> . <Type #<typedecl>>) (<->> . <Type #<typedecl>>))))
NineML abstraction layer value: (<BrunelIaF> . #<MLvalue (Closure (Function <tau> (Function <theta> (Function <tau_rp> (Function <Vreset> (Function <R> (Function <Isyn> (Function <V> (Function <t_rpend> (Function <spikeOutput> (Function <refractoryEnd> (Function <V> (Function <t_rpend> (Function <t> (Function <h> (Apply (Apply Diagram.SEQUENCE (Apply (Apply (Apply (Apply (Apply (Apply (Apply Diagram.RTRANSITION (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply (Apply Signal.div (Apply (Apply Signal.add (Apply Signal.neg V)) (Apply (Apply Signal.mul R) Isyn))) tau)))) (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons V) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub V) theta)))) (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label refractoryEnd))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_rpend)))) (Apply (Apply Signal.boolsig (Const (label st118))) (Apply Signal.boolconst (Const (bool #f)))))) (Apply (Apply Diagram.ON (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t_rpend))) (Apply (Apply cons (Const (label V))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) tau_rp))) (Apply Diagram.PURE Vreset)))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0)))))))))))))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>)
NineML abstraction layer entry type: Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> 't2 -> 't3 -> 't4 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram
NineML abstraction layer return type: Diagram.diagram
NineML abstraction layer formals: (tau theta tau_rp Vreset R Isyn V t_rpend spikeOutput refractoryEnd V t_rpend t h) property-values: ((tau . (Apply (Apply Signal.realparam (Const (label tau))) (Apply Signal.realconst (Const (real 20.0))))) (tau_rp . (Apply (Apply Signal.realparam (Const (label tau_rp))) (Apply Signal.realconst (Const (real 2.0))))) (Vreset . (Apply (Apply Signal.realparam (Const (label Vreset))) (Apply Signal.realconst (Const (real 10.0))))) (R . (Apply (Apply Signal.realparam (Const (label R))) (Apply Signal.realconst (Const (real 100.0)))))) field-values: ((theta . (Apply (Apply Signal.realfield (Const (label theta))) (Apply (Apply Signal.add theta) (Apply Random.normal empty))))) initial-values: ((Isyn . (Apply (Apply Signal.realsig (Const (label Isyn))) (Apply Signal.realconst (Const (real 0.0))))) (V . (Apply (Apply Signal.realsig (Const (label V))) (Apply Random.uniform empty))) (t_rpend . (Apply (Apply Signal.realsig (Const (label t_rpend))) (Apply Signal.realconst (Const (real 0.0))))) (spikeOutput . (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (spikeOutput . (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (refractoryEnd . (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0)))))) return-type: Diagram.diagram
NineML abstraction layer current scope: #<scoping-table>
NineML abstraction layer entry: <BrunelIaF>
NineML ivp: Value ivp_I = (Apply (Apply (Apply IVP.initial I) (Const (label t))) (Const (label h)))
eval-source: defs = (Value I = (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply (Apply BrunelIaF (Apply (Apply Signal.realparam (Const (label tau))) (Apply Signal.realconst (Const (real 20.0))))) (Apply (Apply Signal.realfield (Const (label theta))) (Apply (Apply Signal.add theta) (Apply Random.normal empty)))) (Apply (Apply Signal.realparam (Const (label tau_rp))) (Apply Signal.realconst (Const (real 2.0))))) (Apply (Apply Signal.realparam (Const (label Vreset))) (Apply Signal.realconst (Const (real 10.0))))) (Apply (Apply Signal.realparam (Const (label R))) (Apply Signal.realconst (Const (real 100.0))))) (Apply (Apply Signal.realsig (Const (label Isyn))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label V))) (Apply Random.uniform empty))) (Apply (Apply Signal.realsig (Const (label t_rpend))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Signal.realsig (Const (label refractoryEnd))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Signal.realsig (Const (label V))) (Apply Random.uniform empty))) (Apply (Apply Signal.realsig (Const (label t_rpend))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label t))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label h))) (Apply Signal.realconst (Const (real 0.1))))) Value ivp_I = (Apply (Apply (Apply IVP.initial I) (Const (label t))) (Const (label h))))
NineML abstraction layer URI: #<<URI>>
NineML component propns: ((name rate))
NineML component propvs: ((nml:SingleValue (nml:MathInline input_rate)))
NineML component fieldns: ()
NineML component fieldvs: ()
NineML abstraction layer source: <?xml version='1.0' encoding='UTF-8'?>
<NineML xmlns="http://nineml.incf.org/9ML/0.3">
  <ComponentClass name="Poisson">
    <EventSendPort name="spikeOutput"/>
    <Parameter dimension="" name="rate"/>
    <Dynamics>
      <StateVariable dimension="time" name="t_next"/>
      <Regime name="default">
        <StateAssignment variable="t_next">
            <MathInline> t_next </MathInline>
        </StateAssignment>
        <OnCondition target_regime="default">
          <StateAssignment variable="t_next">
            <MathInline>t + random.exponential(1000/rate)</MathInline>
          </StateAssignment>
          <EventOut port="spikeOutput"/>
          <Trigger>
            <MathInline>t &gt; t_next</MathInline>
          </Trigger>
        </OnCondition>
      </Regime>
    </Dynamics>
  </ComponentClass>
</NineML>

eval-source: defs = (Value Poisson = (Function <rate> (Function <spikeOutput> (Function <t_next> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.TRANSIENT (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t))) (Apply (Apply cons (Const (label t_next))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) h))) (Apply Diagram.PURE t_next)))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t))) (Apply (Apply cons (Const (label t_next))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE t)) (Apply Diagram.PURE (Apply (Apply Signal.add t) (Apply Random.exponential (Apply (Apply Signal.div (Apply Signal.realconst (Const (real 1000.0)))) rate))))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_next))))))))))
NineML abstraction layer uenv: (((Value Poisson = (Function <rate> (Function <spikeOutput> (Function <t_next> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.TRANSIENT (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t))) (Apply (Apply cons (Const (label t_next))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) h))) (Apply Diagram.PURE t_next)))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t))) (Apply (Apply cons (Const (label t_next))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE t)) (Apply Diagram.PURE (Apply (Apply Signal.add t) (Apply Random.exponential (Apply (Apply Signal.div (Apply Signal.realconst (Const (real 1000.0)))) rate))))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_next)))))))))) ((<Poisson> . (val <Poisson>
     :
     Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram)
)) ((<Poisson> . #<MLvalue (Closure (Function <rate> (Function <spikeOutput> (Function <t_next> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.TRANSIENT (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t))) (Apply (Apply cons (Const (label t_next))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) h))) (Apply Diagram.PURE t_next)))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t))) (Apply (Apply cons (Const (label t_next))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE t)) (Apply Diagram.PURE (Apply (Apply Signal.add t) (Apply Random.exponential (Apply (Apply Signal.div (Apply Signal.realconst (Const (real 1000.0)))) rate))))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_next))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>))) (#<scoping-table> ((<Poisson> . <Value Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<timestep> . <Value Signal.sigfun>) (<input_rate> . <Value Signal.sigfun>) (<nu_ext> . <Value Signal.sigfun>) (<nu_thresh> . <Value Signal.sigfun>) (<tau> . <Value Signal.sigfun>) (<theta> . <Value Signal.sigfun>) (<Jext> . <Value Signal.sigfun>) (<Ji> . <Value Signal.sigfun>) (<Je> . <Value Signal.sigfun>) (<eta> . <Value Signal.sigfun>) (<g> . <Value Signal.sigfun>) (<J> . <Value Signal.sigfun>) (<delay> . <Value Signal.sigfun>) (<Cext> . <Value Signal.sigfun>) (<Ci> . <Value Signal.sigfun>) (<Ce> . <Value Signal.sigfun>) (<epsilon> . <Value Signal.sigfun>) (<Ni> . <Value Signal.sigfun>) (<Ne> . <Value Signal.sigfun>) (<order> . <Value Signal.sigfun>) (<AlgebraicSystem> . <Module (sig (type <alsys> = #<typedecl>)

     (val <EQUATION> : label -> Signal.sigfun -> alsys)

     (val <RELATION> : label -> label -> Signal.sigfun -> alsys -> alsys)

     (val <UNION> : alsys -> alsys -> alsys)
)
>) (<IVP> . <Module (sig (type <ivp> = #<typedecl>)

     (val <initial> : Diagram.diagram -> label -> label -> ivp)

     (val <run> : Diagram.diagram -> label -> label -> real -> real -> ivp)
)
>) (<Diagram> . <Module (sig (type <pure> = #<typedecl>)

     (type <diagram> = #<typedecl>)

     (val <IDENTITY> : diagram -> diagram)

     (val <SENSE> : (label) list -> diagram -> diagram)

     (val <ACTUATE> : (label) list -> diagram -> diagram)

     (val <ASSIGN> : (label) list -> pure -> diagram)

     (val <ODE>
     :
     (Signal.sigfun) list -> Signal.sigfun -> Signal.sigfun -> pure -> diagram)

     (val <PURE> : Signal.sigfun -> pure)

     (val <GROUP> : pure -> pure -> pure)

     (val <RELATION> : label -> label -> Signal.sigfun -> pure -> pure)

     (val <SEQUENCE> : diagram -> diagram -> diagram)

     (val <UNION> : diagram -> diagram -> diagram)

     (val <TRANSIENT> : diagram -> diagram -> Signal.sigfun -> diagram -> diagram)

     (val <ON> : diagram -> Signal.sigfun -> diagram)

     (val <RTRANSITION>
     :
     diagram -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram)
)
>) (<Signal> . <Module (sig (type <sigfun> = #<typedecl>)

     (val <signal> : label -> sigfun)

     (val <relation> : label -> sigfun -> sigfun)

     (val <realconst> : real -> sigfun)

     (val <boolconst> : bool -> sigfun)

     (val <realparam> : label -> sigfun -> sigfun)

     (val <realsig> : label -> sigfun -> sigfun)

     (val <realfield> : label -> sigfun -> sigfun)

     (val <boolsig> : label -> sigfun -> sigfun)

     (val <if> : sigfun -> sigfun -> sigfun -> sigfun)

     (val <add> : sigfun -> sigfun -> sigfun)

     (val <sub> : sigfun -> sigfun -> sigfun)

     (val <mul> : sigfun -> sigfun -> sigfun)

     (val <div> : sigfun -> sigfun -> sigfun)

     (val <gte> : sigfun -> sigfun -> sigfun)

     (val <lte> : sigfun -> sigfun -> sigfun)

     (val <gt> : sigfun -> sigfun -> sigfun)

     (val <lt> : sigfun -> sigfun -> sigfun)

     (val <neg> : sigfun -> sigfun)

     (val <log> : sigfun -> sigfun)

     (val <ln> : sigfun -> sigfun)

     (val <cosh> : sigfun -> sigfun)

     (val <tanh> : sigfun -> sigfun)

     (val <exp> : sigfun -> sigfun)
)
>) (<Random> . <Module (sig (val <exponential> : Signal.sigfun -> Signal.sigfun)

     (val <uniform> : bot -> Signal.sigfun)

     (val <normal> : bot -> Signal.sigfun)
)
>) (<Real> . <Module (sig (val <PI> : real)

     (val <add> : real -> real -> real)

     (val <sub> : real -> real -> real)

     (val <mul> : real -> real -> real)

     (val <div> : real -> real -> real)

     (val <gte> : real -> real -> bool)

     (val <lte> : real -> real -> bool)

     (val <gt> : real -> real -> bool)

     (val <lt> : real -> real -> bool)

     (val <neg> : real -> real)

     (val <log> : real -> real)

     (val <ln> : real -> real)

     (val <sin> : real -> real)

     (val <cos> : real -> real)

     (val <cosh> : real -> real)

     (val <tanh> : real -> real)

     (val <exp> : real -> real)

     (val <toNat> : real -> nat)
)
>) (<cond> . <Value bool -> 't1 -> 't2 -> 't3>) (<tail> . <Value ('t1) list -> ('t2) list>) (<head> . <Value ('t1) list -> 't2>) (<cons> . <Value 't1 -> ('t2) list -> ('t3) list>) (<null> . <Value ('t1) list>) (<snd> . <Value 't1 * 't2 -> 't3>) (<fst> . <Value 't1 * 't2 -> 't3>) (<pair> . <Value 't1 -> 't2 -> 't3 * 't4>) (<>=> . <Value nat -> nat -> bool>) (<>> . <Value nat -> nat -> bool>) (<<=> . <Value nat -> nat -> bool>) (<<> . <Value nat -> nat -> bool>) (<<>> . <Value nat -> nat -> bool>) (<==> . <Value nat -> nat -> bool>) (<div> . <Value nat -> nat -> nat>) (<mul> . <Value nat -> nat -> nat>) (<sub> . <Value nat -> nat -> nat>) (<add> . <Value nat -> nat -> nat>) (<empty> . <Value bot>) (<true> . <Value bool>) (<false> . <Value bool>) (<nat> . <Type #<typedecl>>) (<bot> . <Type #<typedecl>>) (<string> . <Type #<typedecl>>) (<label> . <Type #<typedecl>>) (<bool> . <Type #<typedecl>>) (<real> . <Type #<typedecl>>) (<list> . <Type #<typedecl>>) (<*> . <Type #<typedecl>>) (<->> . <Type #<typedecl>>))))
NineML abstraction layer value: (<Poisson> . #<MLvalue (Closure (Function <rate> (Function <spikeOutput> (Function <t_next> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.TRANSIENT (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t))) (Apply (Apply cons (Const (label t_next))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE (Apply (Apply Signal.add t) h))) (Apply Diagram.PURE t_next)))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label t))) (Apply (Apply cons (Const (label t_next))) null))) (Apply (Apply Diagram.GROUP (Apply Diagram.PURE t)) (Apply Diagram.PURE (Apply (Apply Signal.add t) (Apply Random.exponential (Apply (Apply Signal.div (Apply Signal.realconst (Const (real 1000.0)))) rate))))))) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Diagram.ASSIGN (Apply (Apply cons (Const (label spikeOutput))) null)) (Apply Diagram.PURE (Apply (Apply Signal.sub t) t_next))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>)
NineML abstraction layer entry type: Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram
NineML abstraction layer return type: Diagram.diagram
NineML abstraction layer formals: (rate spikeOutput t_next t h) property-values: ((rate . (Apply (Apply Signal.realparam (Const (label rate))) input_rate))) field-values: () initial-values: ((t_next . (Apply (Apply Signal.realsig (Const (label t_next))) (Apply Signal.realconst (Const (real 0.0))))) (spikeOutput . (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0)))))) return-type: Diagram.diagram
NineML abstraction layer current scope: #<scoping-table>
NineML abstraction layer entry: <Poisson>
NineML ivp: Value ivp_Ext = (Apply (Apply (Apply IVP.initial Ext) (Const (label t))) (Const (label h)))
eval-source: defs = (Value Ext = (Apply (Apply (Apply (Apply (Apply Poisson (Apply (Apply Signal.realparam (Const (label rate))) input_rate)) (Apply (Apply Signal.realsig (Const (label spikeOutput))) (Apply Signal.realconst (Const (real -1.0))))) (Apply (Apply Signal.realsig (Const (label t_next))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label t))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label h))) (Apply Signal.realconst (Const (real 0.1))))) Value ivp_Ext = (Apply (Apply (Apply IVP.initial Ext) (Const (label t))) (Const (label h))))
NineML abstraction layer URI: #<<URI>>
NineML component propns: ()
NineML component propvs: ()
NineML component fieldns: ()
NineML component fieldvs: ()
NineML abstraction layer source: <?xml version='1.0' encoding='UTF-8'?>
<NineML xmlns="http://nineml.incf.org/9ML/0.3"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://nineml.incf.org/9ML/0.3 ../NineML_v0.3.xsd">

  <ComponentClass name="ConstantPlasticity">

    <AnalogSendPort name="weight" dimension='voltage'/>

    <Dynamics>

        <StateVariable name="weight" dimension="voltage"/>

        <Regime name="default">
          
          <TimeDerivative variable="weight">
            <MathInline> 0.0 </MathInline>
          </TimeDerivative>

        </Regime>

    </Dynamics>


  </ComponentClass>
</NineML>

eval-source: defs = (Value ConstantPlasticity = (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0))))))))))
NineML abstraction layer uenv: (((Value ConstantPlasticity = (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))))))) ((<ConstantPlasticity> . (val <ConstantPlasticity>
     :
     't1 -> 't2 -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram)
)) ((<ConstantPlasticity> . #<MLvalue (Closure (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>))) (#<scoping-table> ((<ConstantPlasticity> . <Value 't1 -> 't2 -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<Poisson> . <Value Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<timestep> . <Value Signal.sigfun>) (<input_rate> . <Value Signal.sigfun>) (<nu_ext> . <Value Signal.sigfun>) (<nu_thresh> . <Value Signal.sigfun>) (<tau> . <Value Signal.sigfun>) (<theta> . <Value Signal.sigfun>) (<Jext> . <Value Signal.sigfun>) (<Ji> . <Value Signal.sigfun>) (<Je> . <Value Signal.sigfun>) (<eta> . <Value Signal.sigfun>) (<g> . <Value Signal.sigfun>) (<J> . <Value Signal.sigfun>) (<delay> . <Value Signal.sigfun>) (<Cext> . <Value Signal.sigfun>) (<Ci> . <Value Signal.sigfun>) (<Ce> . <Value Signal.sigfun>) (<epsilon> . <Value Signal.sigfun>) (<Ni> . <Value Signal.sigfun>) (<Ne> . <Value Signal.sigfun>) (<order> . <Value Signal.sigfun>) (<AlgebraicSystem> . <Module (sig (type <alsys> = #<typedecl>)

     (val <EQUATION> : label -> Signal.sigfun -> alsys)

     (val <RELATION> : label -> label -> Signal.sigfun -> alsys -> alsys)

     (val <UNION> : alsys -> alsys -> alsys)
)
>) (<IVP> . <Module (sig (type <ivp> = #<typedecl>)

     (val <initial> : Diagram.diagram -> label -> label -> ivp)

     (val <run> : Diagram.diagram -> label -> label -> real -> real -> ivp)
)
>) (<Diagram> . <Module (sig (type <pure> = #<typedecl>)

     (type <diagram> = #<typedecl>)

     (val <IDENTITY> : diagram -> diagram)

     (val <SENSE> : (label) list -> diagram -> diagram)

     (val <ACTUATE> : (label) list -> diagram -> diagram)

     (val <ASSIGN> : (label) list -> pure -> diagram)

     (val <ODE>
     :
     (Signal.sigfun) list -> Signal.sigfun -> Signal.sigfun -> pure -> diagram)

     (val <PURE> : Signal.sigfun -> pure)

     (val <GROUP> : pure -> pure -> pure)

     (val <RELATION> : label -> label -> Signal.sigfun -> pure -> pure)

     (val <SEQUENCE> : diagram -> diagram -> diagram)

     (val <UNION> : diagram -> diagram -> diagram)

     (val <TRANSIENT> : diagram -> diagram -> Signal.sigfun -> diagram -> diagram)

     (val <ON> : diagram -> Signal.sigfun -> diagram)

     (val <RTRANSITION>
     :
     diagram -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram)
)
>) (<Signal> . <Module (sig (type <sigfun> = #<typedecl>)

     (val <signal> : label -> sigfun)

     (val <relation> : label -> sigfun -> sigfun)

     (val <realconst> : real -> sigfun)

     (val <boolconst> : bool -> sigfun)

     (val <realparam> : label -> sigfun -> sigfun)

     (val <realsig> : label -> sigfun -> sigfun)

     (val <realfield> : label -> sigfun -> sigfun)

     (val <boolsig> : label -> sigfun -> sigfun)

     (val <if> : sigfun -> sigfun -> sigfun -> sigfun)

     (val <add> : sigfun -> sigfun -> sigfun)

     (val <sub> : sigfun -> sigfun -> sigfun)

     (val <mul> : sigfun -> sigfun -> sigfun)

     (val <div> : sigfun -> sigfun -> sigfun)

     (val <gte> : sigfun -> sigfun -> sigfun)

     (val <lte> : sigfun -> sigfun -> sigfun)

     (val <gt> : sigfun -> sigfun -> sigfun)

     (val <lt> : sigfun -> sigfun -> sigfun)

     (val <neg> : sigfun -> sigfun)

     (val <log> : sigfun -> sigfun)

     (val <ln> : sigfun -> sigfun)

     (val <cosh> : sigfun -> sigfun)

     (val <tanh> : sigfun -> sigfun)

     (val <exp> : sigfun -> sigfun)
)
>) (<Random> . <Module (sig (val <exponential> : Signal.sigfun -> Signal.sigfun)

     (val <uniform> : bot -> Signal.sigfun)

     (val <normal> : bot -> Signal.sigfun)
)
>) (<Real> . <Module (sig (val <PI> : real)

     (val <add> : real -> real -> real)

     (val <sub> : real -> real -> real)

     (val <mul> : real -> real -> real)

     (val <div> : real -> real -> real)

     (val <gte> : real -> real -> bool)

     (val <lte> : real -> real -> bool)

     (val <gt> : real -> real -> bool)

     (val <lt> : real -> real -> bool)

     (val <neg> : real -> real)

     (val <log> : real -> real)

     (val <ln> : real -> real)

     (val <sin> : real -> real)

     (val <cos> : real -> real)

     (val <cosh> : real -> real)

     (val <tanh> : real -> real)

     (val <exp> : real -> real)

     (val <toNat> : real -> nat)
)
>) (<cond> . <Value bool -> 't1 -> 't2 -> 't3>) (<tail> . <Value ('t1) list -> ('t2) list>) (<head> . <Value ('t1) list -> 't2>) (<cons> . <Value 't1 -> ('t2) list -> ('t3) list>) (<null> . <Value ('t1) list>) (<snd> . <Value 't1 * 't2 -> 't3>) (<fst> . <Value 't1 * 't2 -> 't3>) (<pair> . <Value 't1 -> 't2 -> 't3 * 't4>) (<>=> . <Value nat -> nat -> bool>) (<>> . <Value nat -> nat -> bool>) (<<=> . <Value nat -> nat -> bool>) (<<> . <Value nat -> nat -> bool>) (<<>> . <Value nat -> nat -> bool>) (<==> . <Value nat -> nat -> bool>) (<div> . <Value nat -> nat -> nat>) (<mul> . <Value nat -> nat -> nat>) (<sub> . <Value nat -> nat -> nat>) (<add> . <Value nat -> nat -> nat>) (<empty> . <Value bot>) (<true> . <Value bool>) (<false> . <Value bool>) (<nat> . <Type #<typedecl>>) (<bot> . <Type #<typedecl>>) (<string> . <Type #<typedecl>>) (<label> . <Type #<typedecl>>) (<bool> . <Type #<typedecl>>) (<real> . <Type #<typedecl>>) (<list> . <Type #<typedecl>>) (<*> . <Type #<typedecl>>) (<->> . <Type #<typedecl>>))))
NineML abstraction layer value: (<ConstantPlasticity> . #<MLvalue (Closure (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>)
NineML abstraction layer entry type: 't1 -> 't2 -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram
NineML abstraction layer return type: Diagram.diagram
NineML abstraction layer formals: (weight weight t h) property-values: () field-values: () initial-values: ((weight . (Apply (Apply Signal.realsig (Const (label weight))) Jext))) return-type: Diagram.diagram
NineML abstraction layer current scope: #<scoping-table>
NineML abstraction layer entry: <ConstantPlasticity>
NineML ivp: Value ivp_ExternalPlasticity = (Apply (Apply (Apply IVP.initial ExternalPlasticity) (Const (label t))) (Const (label h)))
eval-source: defs = (Value ExternalPlasticity = (Apply (Apply (Apply (Apply ConstantPlasticity (Apply (Apply Signal.realsig (Const (label weight))) Jext)) (Apply (Apply Signal.realsig (Const (label weight))) Jext)) (Apply (Apply Signal.realsig (Const (label t))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label h))) (Apply Signal.realconst (Const (real 0.1))))) Value ivp_ExternalPlasticity = (Apply (Apply (Apply IVP.initial ExternalPlasticity) (Const (label t))) (Const (label h))))
NineML abstraction layer URI: #<<URI>>
NineML component propns: ()
NineML component propvs: ()
NineML component fieldns: ()
NineML component fieldvs: ()
NineML abstraction layer source: <?xml version='1.0' encoding='UTF-8'?>
<NineML xmlns="http://nineml.incf.org/9ML/0.3"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://nineml.incf.org/9ML/0.3 ../NineML_v0.3.xsd">

  <ComponentClass name="ConstantPlasticity">

    <AnalogSendPort name="weight" dimension='voltage'/>

    <Dynamics>

        <StateVariable name="weight" dimension="voltage"/>

        <Regime name="default">
          
          <TimeDerivative variable="weight">
            <MathInline> 0.0 </MathInline>
          </TimeDerivative>

        </Regime>

    </Dynamics>


  </ComponentClass>
</NineML>

eval-source: defs = (Value ConstantPlasticity = (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0))))))))))
NineML abstraction layer uenv: (((Value ConstantPlasticity = (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))))))) ((<ConstantPlasticity> . (val <ConstantPlasticity>
     :
     't1 -> 't2 -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram)
)) ((<ConstantPlasticity> . #<MLvalue (Closure (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>))) (#<scoping-table> ((<ConstantPlasticity> . <Value 't1 -> 't2 -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<ConstantPlasticity> . <Value 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<Poisson> . <Value Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<timestep> . <Value Signal.sigfun>) (<input_rate> . <Value Signal.sigfun>) (<nu_ext> . <Value Signal.sigfun>) (<nu_thresh> . <Value Signal.sigfun>) (<tau> . <Value Signal.sigfun>) (<theta> . <Value Signal.sigfun>) (<Jext> . <Value Signal.sigfun>) (<Ji> . <Value Signal.sigfun>) (<Je> . <Value Signal.sigfun>) (<eta> . <Value Signal.sigfun>) (<g> . <Value Signal.sigfun>) (<J> . <Value Signal.sigfun>) (<delay> . <Value Signal.sigfun>) (<Cext> . <Value Signal.sigfun>) (<Ci> . <Value Signal.sigfun>) (<Ce> . <Value Signal.sigfun>) (<epsilon> . <Value Signal.sigfun>) (<Ni> . <Value Signal.sigfun>) (<Ne> . <Value Signal.sigfun>) (<order> . <Value Signal.sigfun>) (<AlgebraicSystem> . <Module (sig (type <alsys> = #<typedecl>)

     (val <EQUATION> : label -> Signal.sigfun -> alsys)

     (val <RELATION> : label -> label -> Signal.sigfun -> alsys -> alsys)

     (val <UNION> : alsys -> alsys -> alsys)
)
>) (<IVP> . <Module (sig (type <ivp> = #<typedecl>)

     (val <initial> : Diagram.diagram -> label -> label -> ivp)

     (val <run> : Diagram.diagram -> label -> label -> real -> real -> ivp)
)
>) (<Diagram> . <Module (sig (type <pure> = #<typedecl>)

     (type <diagram> = #<typedecl>)

     (val <IDENTITY> : diagram -> diagram)

     (val <SENSE> : (label) list -> diagram -> diagram)

     (val <ACTUATE> : (label) list -> diagram -> diagram)

     (val <ASSIGN> : (label) list -> pure -> diagram)

     (val <ODE>
     :
     (Signal.sigfun) list -> Signal.sigfun -> Signal.sigfun -> pure -> diagram)

     (val <PURE> : Signal.sigfun -> pure)

     (val <GROUP> : pure -> pure -> pure)

     (val <RELATION> : label -> label -> Signal.sigfun -> pure -> pure)

     (val <SEQUENCE> : diagram -> diagram -> diagram)

     (val <UNION> : diagram -> diagram -> diagram)

     (val <TRANSIENT> : diagram -> diagram -> Signal.sigfun -> diagram -> diagram)

     (val <ON> : diagram -> Signal.sigfun -> diagram)

     (val <RTRANSITION>
     :
     diagram -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram)
)
>) (<Signal> . <Module (sig (type <sigfun> = #<typedecl>)

     (val <signal> : label -> sigfun)

     (val <relation> : label -> sigfun -> sigfun)

     (val <realconst> : real -> sigfun)

     (val <boolconst> : bool -> sigfun)

     (val <realparam> : label -> sigfun -> sigfun)

     (val <realsig> : label -> sigfun -> sigfun)

     (val <realfield> : label -> sigfun -> sigfun)

     (val <boolsig> : label -> sigfun -> sigfun)

     (val <if> : sigfun -> sigfun -> sigfun -> sigfun)

     (val <add> : sigfun -> sigfun -> sigfun)

     (val <sub> : sigfun -> sigfun -> sigfun)

     (val <mul> : sigfun -> sigfun -> sigfun)

     (val <div> : sigfun -> sigfun -> sigfun)

     (val <gte> : sigfun -> sigfun -> sigfun)

     (val <lte> : sigfun -> sigfun -> sigfun)

     (val <gt> : sigfun -> sigfun -> sigfun)

     (val <lt> : sigfun -> sigfun -> sigfun)

     (val <neg> : sigfun -> sigfun)

     (val <log> : sigfun -> sigfun)

     (val <ln> : sigfun -> sigfun)

     (val <cosh> : sigfun -> sigfun)

     (val <tanh> : sigfun -> sigfun)

     (val <exp> : sigfun -> sigfun)
)
>) (<Random> . <Module (sig (val <exponential> : Signal.sigfun -> Signal.sigfun)

     (val <uniform> : bot -> Signal.sigfun)

     (val <normal> : bot -> Signal.sigfun)
)
>) (<Real> . <Module (sig (val <PI> : real)

     (val <add> : real -> real -> real)

     (val <sub> : real -> real -> real)

     (val <mul> : real -> real -> real)

     (val <div> : real -> real -> real)

     (val <gte> : real -> real -> bool)

     (val <lte> : real -> real -> bool)

     (val <gt> : real -> real -> bool)

     (val <lt> : real -> real -> bool)

     (val <neg> : real -> real)

     (val <log> : real -> real)

     (val <ln> : real -> real)

     (val <sin> : real -> real)

     (val <cos> : real -> real)

     (val <cosh> : real -> real)

     (val <tanh> : real -> real)

     (val <exp> : real -> real)

     (val <toNat> : real -> nat)
)
>) (<cond> . <Value bool -> 't1 -> 't2 -> 't3>) (<tail> . <Value ('t1) list -> ('t2) list>) (<head> . <Value ('t1) list -> 't2>) (<cons> . <Value 't1 -> ('t2) list -> ('t3) list>) (<null> . <Value ('t1) list>) (<snd> . <Value 't1 * 't2 -> 't3>) (<fst> . <Value 't1 * 't2 -> 't3>) (<pair> . <Value 't1 -> 't2 -> 't3 * 't4>) (<>=> . <Value nat -> nat -> bool>) (<>> . <Value nat -> nat -> bool>) (<<=> . <Value nat -> nat -> bool>) (<<> . <Value nat -> nat -> bool>) (<<>> . <Value nat -> nat -> bool>) (<==> . <Value nat -> nat -> bool>) (<div> . <Value nat -> nat -> nat>) (<mul> . <Value nat -> nat -> nat>) (<sub> . <Value nat -> nat -> nat>) (<add> . <Value nat -> nat -> nat>) (<empty> . <Value bot>) (<true> . <Value bool>) (<false> . <Value bool>) (<nat> . <Type #<typedecl>>) (<bot> . <Type #<typedecl>>) (<string> . <Type #<typedecl>>) (<label> . <Type #<typedecl>>) (<bool> . <Type #<typedecl>>) (<real> . <Type #<typedecl>>) (<list> . <Type #<typedecl>>) (<*> . <Type #<typedecl>>) (<->> . <Type #<typedecl>>))))
NineML abstraction layer value: (<ConstantPlasticity> . #<MLvalue (Closure (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>)
NineML abstraction layer entry type: 't1 -> 't2 -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram
NineML abstraction layer return type: Diagram.diagram
NineML abstraction layer formals: (weight weight t h) property-values: () field-values: () initial-values: ((weight . (Apply (Apply Signal.realsig (Const (label weight))) Je))) return-type: Diagram.diagram
NineML abstraction layer current scope: #<scoping-table>
NineML abstraction layer entry: <ConstantPlasticity>
NineML ivp: Value ivp_ExcitatoryPlasticity = (Apply (Apply (Apply IVP.initial ExcitatoryPlasticity) (Const (label t))) (Const (label h)))
eval-source: defs = (Value ExcitatoryPlasticity = (Apply (Apply (Apply (Apply ConstantPlasticity (Apply (Apply Signal.realsig (Const (label weight))) Je)) (Apply (Apply Signal.realsig (Const (label weight))) Je)) (Apply (Apply Signal.realsig (Const (label t))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label h))) (Apply Signal.realconst (Const (real 0.1))))) Value ivp_ExcitatoryPlasticity = (Apply (Apply (Apply IVP.initial ExcitatoryPlasticity) (Const (label t))) (Const (label h))))
NineML abstraction layer URI: #<<URI>>
NineML component propns: ()
NineML component propvs: ()
NineML component fieldns: ()
NineML component fieldvs: ()
NineML abstraction layer source: <?xml version='1.0' encoding='UTF-8'?>
<NineML xmlns="http://nineml.incf.org/9ML/0.3"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://nineml.incf.org/9ML/0.3 ../NineML_v0.3.xsd">

  <ComponentClass name="ConstantPlasticity">

    <AnalogSendPort name="weight" dimension='voltage'/>

    <Dynamics>

        <StateVariable name="weight" dimension="voltage"/>

        <Regime name="default">
          
          <TimeDerivative variable="weight">
            <MathInline> 0.0 </MathInline>
          </TimeDerivative>

        </Regime>

    </Dynamics>


  </ComponentClass>
</NineML>

eval-source: defs = (Value ConstantPlasticity = (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0))))))))))
NineML abstraction layer uenv: (((Value ConstantPlasticity = (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0)))))))))) ((<ConstantPlasticity> . (val <ConstantPlasticity>
     :
     't1 -> 't2 -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram)
)) ((<ConstantPlasticity> . #<MLvalue (Closure (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>))) (#<scoping-table> ((<ConstantPlasticity> . <Value 't1 -> 't2 -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<ConstantPlasticity> . <Value 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<ConstantPlasticity> . <Value 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<Poisson> . <Value Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<timestep> . <Value Signal.sigfun>) (<input_rate> . <Value Signal.sigfun>) (<nu_ext> . <Value Signal.sigfun>) (<nu_thresh> . <Value Signal.sigfun>) (<tau> . <Value Signal.sigfun>) (<theta> . <Value Signal.sigfun>) (<Jext> . <Value Signal.sigfun>) (<Ji> . <Value Signal.sigfun>) (<Je> . <Value Signal.sigfun>) (<eta> . <Value Signal.sigfun>) (<g> . <Value Signal.sigfun>) (<J> . <Value Signal.sigfun>) (<delay> . <Value Signal.sigfun>) (<Cext> . <Value Signal.sigfun>) (<Ci> . <Value Signal.sigfun>) (<Ce> . <Value Signal.sigfun>) (<epsilon> . <Value Signal.sigfun>) (<Ni> . <Value Signal.sigfun>) (<Ne> . <Value Signal.sigfun>) (<order> . <Value Signal.sigfun>) (<AlgebraicSystem> . <Module (sig (type <alsys> = #<typedecl>)

     (val <EQUATION> : label -> Signal.sigfun -> alsys)

     (val <RELATION> : label -> label -> Signal.sigfun -> alsys -> alsys)

     (val <UNION> : alsys -> alsys -> alsys)
)
>) (<IVP> . <Module (sig (type <ivp> = #<typedecl>)

     (val <initial> : Diagram.diagram -> label -> label -> ivp)

     (val <run> : Diagram.diagram -> label -> label -> real -> real -> ivp)
)
>) (<Diagram> . <Module (sig (type <pure> = #<typedecl>)

     (type <diagram> = #<typedecl>)

     (val <IDENTITY> : diagram -> diagram)

     (val <SENSE> : (label) list -> diagram -> diagram)

     (val <ACTUATE> : (label) list -> diagram -> diagram)

     (val <ASSIGN> : (label) list -> pure -> diagram)

     (val <ODE>
     :
     (Signal.sigfun) list -> Signal.sigfun -> Signal.sigfun -> pure -> diagram)

     (val <PURE> : Signal.sigfun -> pure)

     (val <GROUP> : pure -> pure -> pure)

     (val <RELATION> : label -> label -> Signal.sigfun -> pure -> pure)

     (val <SEQUENCE> : diagram -> diagram -> diagram)

     (val <UNION> : diagram -> diagram -> diagram)

     (val <TRANSIENT> : diagram -> diagram -> Signal.sigfun -> diagram -> diagram)

     (val <ON> : diagram -> Signal.sigfun -> diagram)

     (val <RTRANSITION>
     :
     diagram -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram)
)
>) (<Signal> . <Module (sig (type <sigfun> = #<typedecl>)

     (val <signal> : label -> sigfun)

     (val <relation> : label -> sigfun -> sigfun)

     (val <realconst> : real -> sigfun)

     (val <boolconst> : bool -> sigfun)

     (val <realparam> : label -> sigfun -> sigfun)

     (val <realsig> : label -> sigfun -> sigfun)

     (val <realfield> : label -> sigfun -> sigfun)

     (val <boolsig> : label -> sigfun -> sigfun)

     (val <if> : sigfun -> sigfun -> sigfun -> sigfun)

     (val <add> : sigfun -> sigfun -> sigfun)

     (val <sub> : sigfun -> sigfun -> sigfun)

     (val <mul> : sigfun -> sigfun -> sigfun)

     (val <div> : sigfun -> sigfun -> sigfun)

     (val <gte> : sigfun -> sigfun -> sigfun)

     (val <lte> : sigfun -> sigfun -> sigfun)

     (val <gt> : sigfun -> sigfun -> sigfun)

     (val <lt> : sigfun -> sigfun -> sigfun)

     (val <neg> : sigfun -> sigfun)

     (val <log> : sigfun -> sigfun)

     (val <ln> : sigfun -> sigfun)

     (val <cosh> : sigfun -> sigfun)

     (val <tanh> : sigfun -> sigfun)

     (val <exp> : sigfun -> sigfun)
)
>) (<Random> . <Module (sig (val <exponential> : Signal.sigfun -> Signal.sigfun)

     (val <uniform> : bot -> Signal.sigfun)

     (val <normal> : bot -> Signal.sigfun)
)
>) (<Real> . <Module (sig (val <PI> : real)

     (val <add> : real -> real -> real)

     (val <sub> : real -> real -> real)

     (val <mul> : real -> real -> real)

     (val <div> : real -> real -> real)

     (val <gte> : real -> real -> bool)

     (val <lte> : real -> real -> bool)

     (val <gt> : real -> real -> bool)

     (val <lt> : real -> real -> bool)

     (val <neg> : real -> real)

     (val <log> : real -> real)

     (val <ln> : real -> real)

     (val <sin> : real -> real)

     (val <cos> : real -> real)

     (val <cosh> : real -> real)

     (val <tanh> : real -> real)

     (val <exp> : real -> real)

     (val <toNat> : real -> nat)
)
>) (<cond> . <Value bool -> 't1 -> 't2 -> 't3>) (<tail> . <Value ('t1) list -> ('t2) list>) (<head> . <Value ('t1) list -> 't2>) (<cons> . <Value 't1 -> ('t2) list -> ('t3) list>) (<null> . <Value ('t1) list>) (<snd> . <Value 't1 * 't2 -> 't3>) (<fst> . <Value 't1 * 't2 -> 't3>) (<pair> . <Value 't1 -> 't2 -> 't3 * 't4>) (<>=> . <Value nat -> nat -> bool>) (<>> . <Value nat -> nat -> bool>) (<<=> . <Value nat -> nat -> bool>) (<<> . <Value nat -> nat -> bool>) (<<>> . <Value nat -> nat -> bool>) (<==> . <Value nat -> nat -> bool>) (<div> . <Value nat -> nat -> nat>) (<mul> . <Value nat -> nat -> nat>) (<sub> . <Value nat -> nat -> nat>) (<add> . <Value nat -> nat -> nat>) (<empty> . <Value bot>) (<true> . <Value bool>) (<false> . <Value bool>) (<nat> . <Type #<typedecl>>) (<bot> . <Type #<typedecl>>) (<string> . <Type #<typedecl>>) (<label> . <Type #<typedecl>>) (<bool> . <Type #<typedecl>>) (<real> . <Type #<typedecl>>) (<list> . <Type #<typedecl>>) (<*> . <Type #<typedecl>>) (<->> . <Type #<typedecl>>))))
NineML abstraction layer value: (<ConstantPlasticity> . #<MLvalue (Closure (Function <weight> (Function <weight> (Function <t> (Function <h> (Apply (Apply (Apply (Apply Diagram.ODE (Apply (Apply cons weight) null)) t) h) (Apply Diagram.PURE (Apply Signal.realconst (Const (real 0.0))))))))) ((<Diagram> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x100> (Function <x99> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x100) (Apply (Apply pair x99) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SEQUENCE>
   .
   #<MLvalue (Closure (Function <x98> (Function <x97> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SEQUENCE))) (Apply (Apply pair x98) (Apply (Apply pair x97) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ON>
   .
   #<MLvalue (Closure (Function <x96> (Function <x95> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ON))) (Apply (Apply pair x96) (Apply (Apply pair x95) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RTRANSITION>
   .
   #<MLvalue (Closure (Function <x94> (Function <x93> (Function <x92> (Function <x91> (Function <x90> (Function <x89> (Function <x88> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label RTRANSITION))) (Apply (Apply pair x94) (Apply (Apply pair x93) (Apply (Apply pair x92) (Apply (Apply pair x91) (Apply (Apply pair x90) (Apply (Apply pair x89) (Apply (Apply pair x88) empty)))))))))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<TRANSIENT>
   .
   #<MLvalue (Closure (Function <x87> (Function <x86> (Function <x85> (Function <x84> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label TRANSIENT))) (Apply (Apply pair x87) (Apply (Apply pair x86) (Apply (Apply pair x85) (Apply (Apply pair x84) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<IDENTITY>
   .
   #<MLvalue (Closure (Function <x83> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label IDENTITY))) (Apply (Apply pair x83) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<GROUP>
   .
   #<MLvalue (Closure (Function <x82> (Function <x81> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label GROUP))) (Apply (Apply pair x82) (Apply (Apply pair x81) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<PURE>
   .
   #<MLvalue (Closure (Function <x80> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label PURE))) (Apply (Apply pair x80) empty)))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x79> (Function <x78> (Function <x77> (Function <x76> (Apply (Apply pair (Const (label pure))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x79) (Apply (Apply pair x78) (Apply (Apply pair x77) (Apply (Apply pair x76) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ODE>
   .
   #<MLvalue (Closure (Function <x75> (Function <x74> (Function <x73> (Function <x72> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ODE))) (Apply (Apply pair x75) (Apply (Apply pair x74) (Apply (Apply pair x73) (Apply (Apply pair x72) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ASSIGN>
   .
   #<MLvalue (Closure (Function <x71> (Function <x70> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ASSIGN))) (Apply (Apply pair x71) (Apply (Apply pair x70) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<ACTUATE>
   .
   #<MLvalue (Closure (Function <x69> (Function <x68> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label ACTUATE))) (Apply (Apply pair x69) (Apply (Apply pair x68) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<SENSE>
   .
   #<MLvalue (Closure (Function <x67> (Function <x66> (Apply (Apply pair (Const (label diagram))) (Apply (Apply pair (Const (label SENSE))) (Apply (Apply pair x67) (Apply (Apply pair x66) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<diagram> . Type diagram = #<deftype>))
) ...))>)
NineML abstraction layer entry type: 't1 -> 't2 -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram
NineML abstraction layer return type: Diagram.diagram
NineML abstraction layer formals: (weight weight t h) property-values: () field-values: () initial-values: ((weight . (Apply (Apply Signal.realsig (Const (label weight))) Ji))) return-type: Diagram.diagram
NineML abstraction layer current scope: #<scoping-table>
NineML abstraction layer entry: <ConstantPlasticity>
NineML ivp: Value ivp_InhibitoryPlasticity = (Apply (Apply (Apply IVP.initial InhibitoryPlasticity) (Const (label t))) (Const (label h)))
eval-source: defs = (Value InhibitoryPlasticity = (Apply (Apply (Apply (Apply ConstantPlasticity (Apply (Apply Signal.realsig (Const (label weight))) Ji)) (Apply (Apply Signal.realsig (Const (label weight))) Ji)) (Apply (Apply Signal.realsig (Const (label t))) (Apply Signal.realconst (Const (real 0.0))))) (Apply (Apply Signal.realsig (Const (label h))) (Apply Signal.realconst (Const (real 0.1))))) Value ivp_InhibitoryPlasticity = (Apply (Apply (Apply IVP.initial InhibitoryPlasticity) (Const (label t))) (Const (label h))))
NineML abstraction layer URI: #<<URI>>
NineML component propns: ()
NineML component propvs: ()
NineML component fieldns: ()
NineML component fieldvs: ()
NineML abstraction layer source: <?xml version='1.0' encoding='UTF-8'?>
<NineML xmlns="http://nineml.incf.org/9ML/0.3"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://nineml.incf.org/9ML/0.3 ../NineML_v0.3.xsd">

  <ComponentClass name="RandomUniformConnection">

    <!-- Probability of connection -->
    <Parameter name="epsilon"/>

    <AlgebraicSystem>

        <StateVariable name="connection"/>

        <Equation variable="connection">
          <MathInline> if (epsilon &gt; random.uniform ()) then 1 else 0</MathInline>
        </Equation>

    </AlgebraicSystem>

  </ComponentClass>
</NineML>

eval-source: defs = (Value RandomUniformConnection = (Function <epsilon> (Apply (Apply AlgebraicSystem.EQUATION (Const (label connection))) (Apply (Apply (Apply Signal.if (Apply (Apply Signal.gt epsilon) (Apply Random.uniform empty))) (Apply Signal.realconst (Const (real 1.0)))) (Apply Signal.realconst (Const (real 0.0)))))))
NineML abstraction layer uenv: (((Value RandomUniformConnection = (Function <epsilon> (Apply (Apply AlgebraicSystem.EQUATION (Const (label connection))) (Apply (Apply (Apply Signal.if (Apply (Apply Signal.gt epsilon) (Apply Random.uniform empty))) (Apply Signal.realconst (Const (real 1.0)))) (Apply Signal.realconst (Const (real 0.0))))))) ((<RandomUniformConnection> . (val <RandomUniformConnection> : Signal.sigfun -> AlgebraicSystem.alsys)
)) ((<RandomUniformConnection> . #<MLvalue (Closure (Function <epsilon> (Apply (Apply AlgebraicSystem.EQUATION (Const (label connection))) (Apply (Apply (Apply Signal.if (Apply (Apply Signal.gt epsilon) (Apply Random.uniform empty))) (Apply Signal.realconst (Const (real 1.0)))) (Apply Signal.realconst (Const (real 0.0)))))) ((<AlgebraicSystem> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x116> (Function <x115> (Apply (Apply pair (Const (label alsys))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x116) (Apply (Apply pair x115) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x114> (Function <x113> (Function <x112> (Function <x111> (Apply (Apply pair (Const (label alsys))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x114) (Apply (Apply pair x113) (Apply (Apply pair x112) (Apply (Apply pair x111) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<EQUATION>
   .
   #<MLvalue (Closure (Function <x110> (Function <x109> (Apply (Apply pair (Const (label alsys))) (Apply (Apply pair (Const (label EQUATION))) (Apply (Apply pair x110) (Apply (Apply pair x109) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<alsys> . Type alsys = #<deftype>))
) ...))>))) (#<scoping-table> ((<RandomUniformConnection> . <Value Signal.sigfun -> AlgebraicSystem.alsys>) (<ConstantPlasticity> . <Value 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<ConstantPlasticity> . <Value 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<ConstantPlasticity> . <Value 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<Poisson> . <Value Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<BrunelIaF> . <Value Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> 't1 -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Signal.sigfun -> Diagram.diagram>) (<timestep> . <Value Signal.sigfun>) (<input_rate> . <Value Signal.sigfun>) (<nu_ext> . <Value Signal.sigfun>) (<nu_thresh> . <Value Signal.sigfun>) (<tau> . <Value Signal.sigfun>) (<theta> . <Value Signal.sigfun>) (<Jext> . <Value Signal.sigfun>) (<Ji> . <Value Signal.sigfun>) (<Je> . <Value Signal.sigfun>) (<eta> . <Value Signal.sigfun>) (<g> . <Value Signal.sigfun>) (<J> . <Value Signal.sigfun>) (<delay> . <Value Signal.sigfun>) (<Cext> . <Value Signal.sigfun>) (<Ci> . <Value Signal.sigfun>) (<Ce> . <Value Signal.sigfun>) (<epsilon> . <Value Signal.sigfun>) (<Ni> . <Value Signal.sigfun>) (<Ne> . <Value Signal.sigfun>) (<order> . <Value Signal.sigfun>) (<AlgebraicSystem> . <Module (sig (type <alsys> = #<typedecl>)

     (val <EQUATION> : label -> Signal.sigfun -> alsys)

     (val <RELATION> : label -> label -> Signal.sigfun -> alsys -> alsys)

     (val <UNION> : alsys -> alsys -> alsys)
)
>) (<IVP> . <Module (sig (type <ivp> = #<typedecl>)

     (val <initial> : Diagram.diagram -> label -> label -> ivp)

     (val <run> : Diagram.diagram -> label -> label -> real -> real -> ivp)
)
>) (<Diagram> . <Module (sig (type <pure> = #<typedecl>)

     (type <diagram> = #<typedecl>)

     (val <IDENTITY> : diagram -> diagram)

     (val <SENSE> : (label) list -> diagram -> diagram)

     (val <ACTUATE> : (label) list -> diagram -> diagram)

     (val <ASSIGN> : (label) list -> pure -> diagram)

     (val <ODE>
     :
     (Signal.sigfun) list -> Signal.sigfun -> Signal.sigfun -> pure -> diagram)

     (val <PURE> : Signal.sigfun -> pure)

     (val <GROUP> : pure -> pure -> pure)

     (val <RELATION> : label -> label -> Signal.sigfun -> pure -> pure)

     (val <SEQUENCE> : diagram -> diagram -> diagram)

     (val <UNION> : diagram -> diagram -> diagram)

     (val <TRANSIENT> : diagram -> diagram -> Signal.sigfun -> diagram -> diagram)

     (val <ON> : diagram -> Signal.sigfun -> diagram)

     (val <RTRANSITION>
     :
     diagram -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram -> Signal.sigfun -> diagram)
)
>) (<Signal> . <Module (sig (type <sigfun> = #<typedecl>)

     (val <signal> : label -> sigfun)

     (val <relation> : label -> sigfun -> sigfun)

     (val <realconst> : real -> sigfun)

     (val <boolconst> : bool -> sigfun)

     (val <realparam> : label -> sigfun -> sigfun)

     (val <realsig> : label -> sigfun -> sigfun)

     (val <realfield> : label -> sigfun -> sigfun)

     (val <boolsig> : label -> sigfun -> sigfun)

     (val <if> : sigfun -> sigfun -> sigfun -> sigfun)

     (val <add> : sigfun -> sigfun -> sigfun)

     (val <sub> : sigfun -> sigfun -> sigfun)

     (val <mul> : sigfun -> sigfun -> sigfun)

     (val <div> : sigfun -> sigfun -> sigfun)

     (val <gte> : sigfun -> sigfun -> sigfun)

     (val <lte> : sigfun -> sigfun -> sigfun)

     (val <gt> : sigfun -> sigfun -> sigfun)

     (val <lt> : sigfun -> sigfun -> sigfun)

     (val <neg> : sigfun -> sigfun)

     (val <log> : sigfun -> sigfun)

     (val <ln> : sigfun -> sigfun)

     (val <cosh> : sigfun -> sigfun)

     (val <tanh> : sigfun -> sigfun)

     (val <exp> : sigfun -> sigfun)
)
>) (<Random> . <Module (sig (val <exponential> : Signal.sigfun -> Signal.sigfun)

     (val <uniform> : bot -> Signal.sigfun)

     (val <normal> : bot -> Signal.sigfun)
)
>) (<Real> . <Module (sig (val <PI> : real)

     (val <add> : real -> real -> real)

     (val <sub> : real -> real -> real)

     (val <mul> : real -> real -> real)

     (val <div> : real -> real -> real)

     (val <gte> : real -> real -> bool)

     (val <lte> : real -> real -> bool)

     (val <gt> : real -> real -> bool)

     (val <lt> : real -> real -> bool)

     (val <neg> : real -> real)

     (val <log> : real -> real)

     (val <ln> : real -> real)

     (val <sin> : real -> real)

     (val <cos> : real -> real)

     (val <cosh> : real -> real)

     (val <tanh> : real -> real)

     (val <exp> : real -> real)

     (val <toNat> : real -> nat)
)
>) (<cond> . <Value bool -> 't1 -> 't2 -> 't3>) (<tail> . <Value ('t1) list -> ('t2) list>) (<head> . <Value ('t1) list -> 't2>) (<cons> . <Value 't1 -> ('t2) list -> ('t3) list>) (<null> . <Value ('t1) list>) (<snd> . <Value 't1 * 't2 -> 't3>) (<fst> . <Value 't1 * 't2 -> 't3>) (<pair> . <Value 't1 -> 't2 -> 't3 * 't4>) (<>=> . <Value nat -> nat -> bool>) (<>> . <Value nat -> nat -> bool>) (<<=> . <Value nat -> nat -> bool>) (<<> . <Value nat -> nat -> bool>) (<<>> . <Value nat -> nat -> bool>) (<==> . <Value nat -> nat -> bool>) (<div> . <Value nat -> nat -> nat>) (<mul> . <Value nat -> nat -> nat>) (<sub> . <Value nat -> nat -> nat>) (<add> . <Value nat -> nat -> nat>) (<empty> . <Value bot>) (<true> . <Value bool>) (<false> . <Value bool>) (<nat> . <Type #<typedecl>>) (<bot> . <Type #<typedecl>>) (<string> . <Type #<typedecl>>) (<label> . <Type #<typedecl>>) (<bool> . <Type #<typedecl>>) (<real> . <Type #<typedecl>>) (<list> . <Type #<typedecl>>) (<*> . <Type #<typedecl>>) (<->> . <Type #<typedecl>>))))
NineML abstraction layer value: (<RandomUniformConnection> . #<MLvalue (Closure (Function <epsilon> (Apply (Apply AlgebraicSystem.EQUATION (Const (label connection))) (Apply (Apply (Apply Signal.if (Apply (Apply Signal.gt epsilon) (Apply Random.uniform empty))) (Apply Signal.realconst (Const (real 1.0)))) (Apply Signal.realconst (Const (real 0.0)))))) ((<AlgebraicSystem> . (Structure
  (<UNION>
   .
   #<MLvalue (Closure (Function <x116> (Function <x115> (Apply (Apply pair (Const (label alsys))) (Apply (Apply pair (Const (label UNION))) (Apply (Apply pair x116) (Apply (Apply pair x115) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<RELATION>
   .
   #<MLvalue (Closure (Function <x114> (Function <x113> (Function <x112> (Function <x111> (Apply (Apply pair (Const (label alsys))) (Apply (Apply pair (Const (label RELATION))) (Apply (Apply pair x114) (Apply (Apply pair x113) (Apply (Apply pair x112) (Apply (Apply pair x111) empty)))))))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<EQUATION>
   .
   #<MLvalue (Closure (Function <x110> (Function <x109> (Apply (Apply pair (Const (label alsys))) (Apply (Apply pair (Const (label EQUATION))) (Apply (Apply pair x110) (Apply (Apply pair x109) empty)))))) ((<pair> . #<MLvalue (Prim #<procedure (a1654 xenv307 x308)>)>) ...))>)
  (<alsys> . Type alsys = #<deftype>))
) ...))>)
NineML abstraction layer entry type: Signal.sigfun -> AlgebraicSystem.alsys
NineML abstraction layer return type: AlgebraicSystem.alsys
NineML abstraction layer formals: (epsilon) property-values: () field-values: () initial-values: ((epsilon . (Apply (Apply Signal.realsig (Const (label epsilon))) epsilon))) return-type: AlgebraicSystem.alsys
NineML abstraction layer current scope: #<scoping-table>
NineML abstraction layer entry: <RandomUniformConnection>
NineML ivp: #f
eval-source: defs = (Value RandomUniform = (Apply RandomUniformConnection (Apply (Apply Signal.realsig (Const (label epsilon))) epsilon)))
ul-sxml = (*TOP* (@ (*NAMESPACES* (nml http://nineml.incf.org/9ML/0.2) (nml http://nineml.incf.org/9ML/0.3) (nml http://nineml.incf.org/9ML/1.0))) (*PI* xml version='1.0' encoding='UTF-8') (nml:NineML (@ (http://www.w3.org/2001/XMLSchema-instance:schemaLocation http://nineml.incf.org/9ML/0.3 ../NineML_v0.3.xsd) (name Brunel (2000) Model A Network)) (nml:Property (@ (name order)) (nml:Quantity (nml:SingleValue 2500))) (nml:Property (@ (name Ne)) (nml:Quantity (nml:SingleValue (nml:MathInline 4 * order)))) (nml:Property (@ (name Ni)) (nml:Quantity (nml:SingleValue (nml:MathInline 1 * order)))) (nml:Property (@ (name epsilon)) (nml:Quantity (nml:SingleValue 0.1))) (nml:Property (@ (name Ce)) (nml:Quantity (nml:SingleValue (nml:MathInline epsilon * Ne)))) (nml:Property (@ (name Ci)) (nml:Quantity (nml:SingleValue (nml:MathInline epsilon * Ni)))) (nml:Property (@ (name Cext)) (nml:Quantity (nml:SingleValue (nml:MathInline Ce)))) (nml:Property (@ (unit ms) (name delay)) (nml:Quantity (nml:SingleValue 1.5))) (nml:Property (@ (unit mV) (name J)) (nml:Quantity (nml:SingleValue 0.1))) (nml:Property (@ (name g)) (nml:Quantity (nml:SingleValue 4.5))) (nml:Property (@ (name eta)) (nml:Quantity (nml:SingleValue 0.9))) (nml:Property (@ (name Je)) (nml:Quantity (nml:SingleValue (nml:MathInline J)))) (nml:Property (@ (name Ji)) (nml:Quantity (nml:SingleValue (nml:MathInline -g * Je)))) (nml:Property (@ (name Jext)) (nml:Quantity (nml:SingleValue (nml:MathInline Je)))) (nml:Property (@ (unit mV) (name theta)) (nml:Quantity (nml:SingleValue 20.0))) (nml:Property (@ (unit ms) (name tau)) (nml:Quantity (nml:SingleValue 20.0))) (nml:Property (@ (name nu_thresh)) (nml:Quantity (nml:SingleValue (nml:MathInline theta / (Je * Ce * tau))))) (nml:Property (@ (name nu_ext)) (nml:Quantity (nml:SingleValue (nml:MathInline eta * nu_thresh)))) (nml:Property (@ (unit Hz) (name input_rate)) (nml:Quantity (nml:SingleValue (nml:MathInline 1000.0 * nu_ext)))) (nml:Property (@ (name timestep)) (nml:Quantity (nml:SingleValue 0.2))) (nml:Component (@ (name E)) (nml:Definition (@ (url BrunelIaF.xml)) BrunelIaF) (nml:Property (@ (name tau)) (nml:Quantity (nml:SingleValue 20.0))) (nml:Property (@ (name tau_rp)) (nml:Quantity (nml:SingleValue 2.0))) (nml:Property (@ (name Vreset)) (nml:Quantity (nml:SingleValue 10.0))) (nml:Property (@ (name R)) (nml:Quantity (nml:SingleValue 100.0))) (nml:Initial (@ (name Isyn)) (nml:Quantity (nml:SingleValue 0.0))) (nml:Initial (@ (name V)) (nml:Quantity (nml:SingleValue (nml:MathInline  random.uniform ())))) (nml:Initial (@ (name t_rpend)) (nml:Quantity (nml:SingleValue 0.0))) (nml:Initial (@ (name spikeOutput)) (nml:Quantity (nml:SingleValue -1.0))) (nml:Initial (@ (name refractoryEnd)) (nml:Quantity (nml:SingleValue -1.0))) (nml:Field (@ (name theta)) (nml:Quantity (nml:SingleValue (nml:MathInline theta + random.normal ()))))) (nml:Component (@ (name I)) (nml:Definition (@ (url BrunelIaF.xml)) BrunelIaF) (nml:Property (@ (name tau)) (nml:Quantity (nml:SingleValue 20.0))) (nml:Property (@ (name tau_rp)) (nml:Quantity (nml:SingleValue 2.0))) (nml:Property (@ (name Vreset)) (nml:Quantity (nml:SingleValue 10.0))) (nml:Property (@ (name R)) (nml:Quantity (nml:SingleValue 100.0))) (nml:Initial (@ (name Isyn)) (nml:Quantity (nml:SingleValue 0.0))) (nml:Initial (@ (name V)) (nml:Quantity (nml:SingleValue (nml:MathInline  random.uniform ())))) (nml:Initial (@ (name t_rpend)) (nml:Quantity (nml:SingleValue 0.0))) (nml:Initial (@ (name spikeOutput)) (nml:Quantity (nml:SingleValue -1.0))) (nml:Initial (@ (name spikeOutput)) (nml:Quantity (nml:SingleValue -1.0))) (nml:Initial (@ (name refractoryEnd)) (nml:Quantity (nml:SingleValue -1.0))) (nml:Field (@ (name theta)) (nml:Quantity (nml:SingleValue (nml:MathInline theta + random.normal ()))))) (nml:Component (@ (name Ext)) (nml:Definition (@ (url Poisson.xml)) Poisson) (nml:Property (@ (name rate)) (nml:Quantity (nml:SingleValue (nml:MathInline input_rate)))) (nml:Initial (@ (name t_next)) (nml:Quantity (nml:SingleValue 0.0))) (nml:Initial (@ (name spikeOutput)) (nml:Quantity (nml:SingleValue -1.0)))) (nml:Component (@ (name ExternalPlasticity)) (nml:Definition (@ (url ConstantPlasticity.xml)) ConstantPlasticity) (nml:Initial (@ (name weight)) (nml:Quantity (nml:SingleValue (nml:MathInline Jext))))) (nml:Component (@ (name ExcitatoryPlasticity)) (nml:Definition (@ (url ConstantPlasticity.xml)) ConstantPlasticity) (nml:Initial (@ (name weight)) (nml:Quantity (nml:SingleValue (nml:MathInline Je))))) (nml:Component (@ (name InhibitoryPlasticity)) (nml:Definition (@ (url ConstantPlasticity.xml)) ConstantPlasticity) (nml:Initial (@ (name weight)) (nml:Quantity (nml:SingleValue (nml:MathInline Ji))))) (nml:Component (@ (name RandomUniform)) (nml:Definition (@ (url RandomUniformConnection.xml)) RandomUniformConnection) (nml:Initial (@ (name epsilon)) (nml:Quantity (nml:SingleValue (nml:MathInline epsilon))))) (nml:Group (@ (name BrunelCaseD)) (nml:Population (@ (name Exc)) (nml:Cell (nml:Reference E)) (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Ne))))) (nml:Population (@ (name Inh)) (nml:Cell (nml:Reference I)) (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Ni))))) (nml:Population (@ (name Ext)) (nml:Cell (nml:Reference Ext)) (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Cext))))) (nml:Selection (@ (name All neurons)) (nml:Union (nml:Left (nml:Item Exc)) (nml:Right (nml:Item Inh)))) (nml:Projection (@ (output_event_port spikeOutput) (name External) (input_response_port Ispike) (input_event_port spike) (input_analog_port Isyn)) (nml:source (nml:Reference Ext)) (nml:target (nml:Reference All neurons)) (nml:rule (@ (operator all-to-all))) (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay)))) (nml:plasticity (nml:Reference ExternalPlasticity))) (nml:Projection (@ (output_event_port spikeOutput) (name Excitation) (input_response_port Ispike) (input_event_port spike) (input_analog_port Isyn)) (nml:source (nml:Reference Exc)) (nml:target (nml:Reference All neurons)) (nml:rule (@ (operator for-each)) (nml:Reference RandomUniform) (nml:state connection)) (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay)))) (nml:plasticity (nml:Reference ExcitatoryPlasticity))) (nml:Projection (@ (output_event_port spikeOutput) (name Inhibition) (input_response_port Ispike) (input_event_port spike) (input_analog_port Isyn)) (nml:source (nml:Reference Inh)) (nml:target (nml:Reference All neurons)) (nml:rule (@ (operator for-each)) (nml:Reference RandomUniform) (nml:state connection)) (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay)))) (nml:plasticity (nml:Reference InhibitoryPlasticity))) (nml:SpikeRecording (@ (set All neurons))))))
ul-properties = ((order (expr . (realsig order (realconst 2500.0))) (exprML . 2500.0)) (Ne (expr . (* (realconst 4.0) (realsig order (realconst 2500.0)))) (exprML . Real.* (4.0, 2500.0))) (Ni (expr . (* (realconst 1.0) (realsig order (realconst 2500.0)))) (exprML . Real.* (1.0, 2500.0))) (epsilon (expr . (realsig epsilon (realconst 0.1))) (exprML . 0.1)) (Ce (expr . (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (exprML . Real.* (0.1, Real.* (4.0, 2500.0)))) (Ci (expr . (* (realsig epsilon (realconst 0.1)) (* (realconst 1.0) (realsig order (realconst 2500.0))))) (exprML . Real.* (0.1, Real.* (1.0, 2500.0)))) (Cext (expr . (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (exprML . Real.* (0.1, Real.* (4.0, 2500.0)))) (delay (expr . (realsig delay (realconst 1.5))) (exprML . 1.5)) (J (expr . (realsig J (realconst 0.1))) (exprML . 0.1)) (g (expr . (realsig g (realconst 4.5))) (exprML . 4.5)) (eta (expr . (realsig eta (realconst 0.9))) (exprML . 0.9)) (Je (expr . (realsig J (realconst 0.1))) (exprML . 0.1)) (Ji (expr . (neg (* (realsig g (realconst 4.5)) (realsig J (realconst 0.1))))) (exprML . Real.~ (Real.* (4.5, 0.1)))) (Jext (expr . (realsig J (realconst 0.1))) (exprML . 0.1)) (theta (expr . (realsig theta (realconst 20.0))) (exprML . 20.0)) (tau (expr . (realsig tau (realconst 20.0))) (exprML . 20.0)) (nu_thresh (expr . (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0))))) (exprML . Real./ (20.0, Real.* (Real.* (0.1, Real.* (0.1, Real.* (4.0, 2500.0))), 20.0)))) (nu_ext (expr . (* (realsig eta (realconst 0.9)) (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0)))))) (exprML . Real.* (0.9, Real./ (20.0, Real.* (Real.* (0.1, Real.* (0.1, Real.* (4.0, 2500.0))), 20.0))))) (input_rate (expr . (* (realconst 1000.0) (* (realsig eta (realconst 0.9)) (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0))))))) (exprML . Real.* (1000.0, Real.* (0.9, Real./ (20.0, Real.* (Real.* (0.1, Real.* (0.1, Real.* (4.0, 2500.0))), 20.0)))))) (timestep (expr . (realsig timestep (realconst 0.2))) (exprML . 0.2)))
ul-groups = ((nml:Group (@ (name BrunelCaseD)) (nml:Population (@ (name Exc)) (nml:Cell (nml:Reference E)) (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Ne))))) (nml:Population (@ (name Inh)) (nml:Cell (nml:Reference I)) (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Ni))))) (nml:Population (@ (name Ext)) (nml:Cell (nml:Reference Ext)) (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Cext))))) (nml:Selection (@ (name All neurons)) (nml:Union (nml:Left (nml:Item Exc)) (nml:Right (nml:Item Inh)))) (nml:Projection (@ (output_event_port spikeOutput) (name External) (input_response_port Ispike) (input_event_port spike) (input_analog_port Isyn)) (nml:source (nml:Reference Ext)) (nml:target (nml:Reference All neurons)) (nml:rule (@ (operator all-to-all))) (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay)))) (nml:plasticity (nml:Reference ExternalPlasticity))) (nml:Projection (@ (output_event_port spikeOutput) (name Excitation) (input_response_port Ispike) (input_event_port spike) (input_analog_port Isyn)) (nml:source (nml:Reference Exc)) (nml:target (nml:Reference All neurons)) (nml:rule (@ (operator for-each)) (nml:Reference RandomUniform) (nml:state connection)) (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay)))) (nml:plasticity (nml:Reference ExcitatoryPlasticity))) (nml:Projection (@ (output_event_port spikeOutput) (name Inhibition) (input_response_port Ispike) (input_event_port spike) (input_analog_port Isyn)) (nml:source (nml:Reference Inh)) (nml:target (nml:Reference All neurons)) (nml:rule (@ (operator for-each)) (nml:Reference RandomUniform) (nml:state connection)) (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay)))) (nml:plasticity (nml:Reference InhibitoryPlasticity))) (nml:SpikeRecording (@ (set All neurons)))))
ul-components = ((nml:Component (@ (name E)) (nml:Definition (@ (url BrunelIaF.xml)) BrunelIaF) (nml:Property (@ (name tau)) (nml:Quantity (nml:SingleValue 20.0))) (nml:Property (@ (name tau_rp)) (nml:Quantity (nml:SingleValue 2.0))) (nml:Property (@ (name Vreset)) (nml:Quantity (nml:SingleValue 10.0))) (nml:Property (@ (name R)) (nml:Quantity (nml:SingleValue 100.0))) (nml:Initial (@ (name Isyn)) (nml:Quantity (nml:SingleValue 0.0))) (nml:Initial (@ (name V)) (nml:Quantity (nml:SingleValue (nml:MathInline  random.uniform ())))) (nml:Initial (@ (name t_rpend)) (nml:Quantity (nml:SingleValue 0.0))) (nml:Initial (@ (name spikeOutput)) (nml:Quantity (nml:SingleValue -1.0))) (nml:Initial (@ (name refractoryEnd)) (nml:Quantity (nml:SingleValue -1.0))) (nml:Field (@ (name theta)) (nml:Quantity (nml:SingleValue (nml:MathInline theta + random.normal ()))))) (nml:Component (@ (name I)) (nml:Definition (@ (url BrunelIaF.xml)) BrunelIaF) (nml:Property (@ (name tau)) (nml:Quantity (nml:SingleValue 20.0))) (nml:Property (@ (name tau_rp)) (nml:Quantity (nml:SingleValue 2.0))) (nml:Property (@ (name Vreset)) (nml:Quantity (nml:SingleValue 10.0))) (nml:Property (@ (name R)) (nml:Quantity (nml:SingleValue 100.0))) (nml:Initial (@ (name Isyn)) (nml:Quantity (nml:SingleValue 0.0))) (nml:Initial (@ (name V)) (nml:Quantity (nml:SingleValue (nml:MathInline  random.uniform ())))) (nml:Initial (@ (name t_rpend)) (nml:Quantity (nml:SingleValue 0.0))) (nml:Initial (@ (name spikeOutput)) (nml:Quantity (nml:SingleValue -1.0))) (nml:Initial (@ (name spikeOutput)) (nml:Quantity (nml:SingleValue -1.0))) (nml:Initial (@ (name refractoryEnd)) (nml:Quantity (nml:SingleValue -1.0))) (nml:Field (@ (name theta)) (nml:Quantity (nml:SingleValue (nml:MathInline theta + random.normal ()))))) (nml:Component (@ (name Ext)) (nml:Definition (@ (url Poisson.xml)) Poisson) (nml:Property (@ (name rate)) (nml:Quantity (nml:SingleValue (nml:MathInline input_rate)))) (nml:Initial (@ (name t_next)) (nml:Quantity (nml:SingleValue 0.0))) (nml:Initial (@ (name spikeOutput)) (nml:Quantity (nml:SingleValue -1.0)))) (nml:Component (@ (name ExternalPlasticity)) (nml:Definition (@ (url ConstantPlasticity.xml)) ConstantPlasticity) (nml:Initial (@ (name weight)) (nml:Quantity (nml:SingleValue (nml:MathInline Jext))))) (nml:Component (@ (name ExcitatoryPlasticity)) (nml:Definition (@ (url ConstantPlasticity.xml)) ConstantPlasticity) (nml:Initial (@ (name weight)) (nml:Quantity (nml:SingleValue (nml:MathInline Je))))) (nml:Component (@ (name InhibitoryPlasticity)) (nml:Definition (@ (url ConstantPlasticity.xml)) ConstantPlasticity) (nml:Initial (@ (name weight)) (nml:Quantity (nml:SingleValue (nml:MathInline Ji))))) (nml:Component (@ (name RandomUniform)) (nml:Definition (@ (url RandomUniformConnection.xml)) RandomUniformConnection) (nml:Initial (@ (name epsilon)) (nml:Quantity (nml:SingleValue (nml:MathInline epsilon))))))
make-ivp-cgen-hook: value = (Tuple (left (Const (label ivp))) (right (Tuple (left (Const (label initial))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label SEQUENCE))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label RTRANSITION))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ODE))) (right (Tuple (left (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label V))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label uniform))) (right (Tuple (left (null)) (right (null)))))))) (right (null)))))))))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label h))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label /))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label +))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label neg))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label V))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label uniform))) (right (Tuple (left (null)) (right (null)))))))) (right (null)))))))))) (right (null)))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label *))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realparam))) (right (Tuple (left (Const (label R))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 100.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label Isyn))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realparam))) (right (Tuple (left (Const (label tau))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 20.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))))))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ODE))) (right (Tuple (left (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label V))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label uniform))) (right (Tuple (left (null)) (right (null)))))))) (right (null)))))))))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label h))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))) (right (null)))))))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label spikeOutput))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real -1.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ASSIGN))) (right (Tuple (left (Tuple (left (Const (label spikeOutput))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label -))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label V))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label uniform))) (right (Tuple (left (null)) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realfield))) (right (Tuple (left (Const (label theta))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label +))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label theta))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 20.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label normal))) (right (Tuple (left (null)) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label refractoryEnd))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real -1.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ASSIGN))) (right (Tuple (left (Tuple (left (Const (label refractoryEnd))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label -))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t_rpend))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label boolsig))) (right (Tuple (left (Const (label st117))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label boolconst))) (right (Tuple (left (Const (bool false))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))))))))))))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ON))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ASSIGN))) (right (Tuple (left (Tuple (left (Const (label t_rpend))) (right (Tuple (left (Const (label V))) (right (null)))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label GROUP))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label +))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realparam))) (right (Tuple (left (Const (label tau_rp))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 2.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realparam))) (right (Tuple (left (Const (label Vreset))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 10.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label spikeOutput))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real -1.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Const (label h))) (right (null)))))))))))
generate-ivp-code: sdinfo = ((signal-diagram . #<sfarrow>) (initial-conditions (spikeOutput realconst -1.0) (t realconst 0.0) (st117 . #f) (t_rpend realconst 0.0) (refractoryEnd realconst -1.0) (V random uniform ()) (h realconst 0.1) (Isyn realconst 0.0)) (params (Vreset realconst 10.0) (tau_rp realconst 2.0) (theta + (realsig theta (realconst 20.0)) (random normal ())) (tau realconst 20.0) (R realconst 100.0)) (dfe (gen sf138 sf137 t_rpend h V t V(t+h121)122 sf119 spikeOutput refractoryEnd sf120 V(t+h128)129 st117) (kill sf137 sf138 spikeOutput sf119 t+h121 R Isyn tau h t theta V refractoryEnd sf120 V(t+h128)129 st117) (in Vreset tau_rp st117 refractoryEnd spikeOutput R Isyn tau h V theta t_rpend t) (out t_rpend h V t st117 spikeOutput refractoryEnd)) (ivar . t) (hvar . h) (dvars st117 refractoryEnd spikeOutput h V t_rpend) (pvars Vreset tau_rp theta tau R) (events spikeOutput spikeOutput) (inputs Isyn) (outputs t_rpend h V t st117 spikeOutput refractoryEnd) (fields (theta + (realsig theta (realconst 20.0)) (random normal ()))))
generate-ivp-code: ic = ((spikeOutput realconst -1.0) (t realconst 0.0) (st117 . #f) (t_rpend realconst 0.0) (refractoryEnd realconst -1.0) (V random uniform ()) (h realconst 0.1) (Isyn realconst 0.0))
make-ivp-cgen-hook: value = (Tuple (left (Const (label ivp))) (right (Tuple (left (Const (label initial))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label SEQUENCE))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label RTRANSITION))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ODE))) (right (Tuple (left (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label V))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label uniform))) (right (Tuple (left (null)) (right (null)))))))) (right (null)))))))))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label h))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label /))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label +))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label neg))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label V))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label uniform))) (right (Tuple (left (null)) (right (null)))))))) (right (null)))))))))) (right (null)))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label *))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realparam))) (right (Tuple (left (Const (label R))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 100.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label Isyn))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realparam))) (right (Tuple (left (Const (label tau))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 20.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))))))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ODE))) (right (Tuple (left (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label V))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label uniform))) (right (Tuple (left (null)) (right (null)))))))) (right (null)))))))))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label h))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))) (right (null)))))))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label spikeOutput))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real -1.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ASSIGN))) (right (Tuple (left (Tuple (left (Const (label spikeOutput))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label -))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label V))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label uniform))) (right (Tuple (left (null)) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realfield))) (right (Tuple (left (Const (label theta))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label +))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label theta))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 20.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label normal))) (right (Tuple (left (null)) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label refractoryEnd))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real -1.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ASSIGN))) (right (Tuple (left (Tuple (left (Const (label refractoryEnd))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label -))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t_rpend))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label boolsig))) (right (Tuple (left (Const (label st118))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label boolconst))) (right (Tuple (left (Const (bool false))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))))))))))))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ON))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ASSIGN))) (right (Tuple (left (Tuple (left (Const (label t_rpend))) (right (Tuple (left (Const (label V))) (right (null)))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label GROUP))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label +))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realparam))) (right (Tuple (left (Const (label tau_rp))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 2.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realparam))) (right (Tuple (left (Const (label Vreset))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 10.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label spikeOutput))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real -1.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Const (label h))) (right (null)))))))))))
generate-ivp-code: sdinfo = ((signal-diagram . #<sfarrow>) (initial-conditions (spikeOutput realconst -1.0) (t realconst 0.0) (st118 . #f) (t_rpend realconst 0.0) (refractoryEnd realconst -1.0) (V random uniform ()) (h realconst 0.1) (Isyn realconst 0.0)) (params (Vreset realconst 10.0) (tau_rp realconst 2.0) (theta + (realsig theta (realconst 20.0)) (random normal ())) (tau realconst 20.0) (R realconst 100.0)) (dfe (gen sf205 sf204 t_rpend h V t V(t+h188)189 sf186 spikeOutput refractoryEnd sf187 V(t+h195)196 st118) (kill sf204 sf205 spikeOutput sf186 t+h188 R Isyn tau h t theta V refractoryEnd sf187 V(t+h195)196 st118) (in Vreset tau_rp st118 refractoryEnd spikeOutput R Isyn tau h V theta t_rpend t) (out t_rpend h V t st118 spikeOutput refractoryEnd)) (ivar . t) (hvar . h) (dvars st118 refractoryEnd spikeOutput h V t_rpend) (pvars Vreset tau_rp theta tau R) (events spikeOutput spikeOutput) (inputs Isyn) (outputs t_rpend h V t st118 spikeOutput refractoryEnd) (fields (theta + (realsig theta (realconst 20.0)) (random normal ()))))
generate-ivp-code: ic = ((spikeOutput realconst -1.0) (t realconst 0.0) (st118 . #f) (t_rpend realconst 0.0) (refractoryEnd realconst -1.0) (V random uniform ()) (h realconst 0.1) (Isyn realconst 0.0))
make-ivp-cgen-hook: value = (Tuple (left (Const (label ivp))) (right (Tuple (left (Const (label initial))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label TRANSIENT))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ASSIGN))) (right (Tuple (left (Tuple (left (Const (label t))) (right (Tuple (left (Const (label t_next))) (right (null)))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label GROUP))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label +))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label h))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t_next))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ASSIGN))) (right (Tuple (left (Tuple (left (Const (label t))) (right (Tuple (left (Const (label t_next))) (right (null)))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label GROUP))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label +))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label random))) (right (Tuple (left (Const (label exponential))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label /))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 1000.0))) (right (null)))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realparam))) (right (Tuple (left (Const (label rate))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label *))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 1000.0))) (right (null)))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label *))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label eta))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.9))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label /))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label theta))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 20.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label *))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label *))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label J))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label *))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label epsilon))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label *))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 4.0))) (right (null)))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label order))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 2500))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label tau))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 20.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label spikeOutput))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real -1.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ASSIGN))) (right (Tuple (left (Tuple (left (Const (label spikeOutput))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label -))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t_next))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))))))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Const (label h))) (right (null)))))))))))
generate-ivp-code: sdinfo = ((signal-diagram . #<sfarrow>) (initial-conditions (t_next realconst 0.0) (t realconst 0.0) (spikeOutput realconst -1.0) (h realconst 0.1)) (params (rate * (realconst 1000.0) (* (realsig eta (realconst 0.9)) (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0))))))) (dfe (gen sf257 sf256 t sf254 sf255 t_next) (kill t_next sf255 t sf254) (in spikeOutput rate t h t_next) (out t_next t spikeOutput)) (ivar . t) (hvar . h) (dvars spikeOutput t_next) (pvars rate) (events spikeOutput) (inputs) (outputs t_next t spikeOutput) (fields))
generate-ivp-code: ic = ((t_next realconst 0.0) (t realconst 0.0) (spikeOutput realconst -1.0) (h realconst 0.1))
make-ivp-cgen-hook: value = (Tuple (left (Const (label ivp))) (right (Tuple (left (Const (label initial))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ODE))) (right (Tuple (left (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label weight))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label J))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label h))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))) (right (null)))))))))))))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Const (label h))) (right (null)))))))))))
generate-ivp-code: sdinfo = ((signal-diagram . #<sfarrow>) (initial-conditions (h realconst 0.1) (t realconst 0.0) (weight realsig J (realconst 0.1))) (params) (dfe (gen weight(t+h286)287 t weight h) (kill t+h286 h t weight) (in h t weight) (out t weight h)) (ivar . t) (hvar . h) (dvars h weight) (pvars) (events) (inputs) (outputs t weight h) (fields))
generate-ivp-code: ic = ((h realconst 0.1) (t realconst 0.0) (weight realsig J (realconst 0.1)))
make-ivp-cgen-hook: value = (Tuple (left (Const (label ivp))) (right (Tuple (left (Const (label initial))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ODE))) (right (Tuple (left (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label weight))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label J))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label h))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))) (right (null)))))))))))))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Const (label h))) (right (null)))))))))))
generate-ivp-code: sdinfo = ((signal-diagram . #<sfarrow>) (initial-conditions (h realconst 0.1) (t realconst 0.0) (weight realsig J (realconst 0.1))) (params) (dfe (gen weight(t+h296)297 t weight h) (kill t+h296 h t weight) (in h t weight) (out t weight h)) (ivar . t) (hvar . h) (dvars h weight) (pvars) (events) (inputs) (outputs t weight h) (fields))
generate-ivp-code: ic = ((h realconst 0.1) (t realconst 0.0) (weight realsig J (realconst 0.1)))
make-ivp-cgen-hook: value = (Tuple (left (Const (label ivp))) (right (Tuple (left (Const (label initial))) (right (Tuple (left (Tuple (left (Const (label diagram))) (right (Tuple (left (Const (label ODE))) (right (Tuple (left (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label weight))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label neg))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label *))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label g))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 4.5))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label J))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (null)))))))))) (right (null)))))))) (right (null)))))))))) (right (null)))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realsig))) (right (Tuple (left (Const (label h))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.1))) (right (null)))))))) (right (null)))))))))) (right (Tuple (left (Tuple (left (Const (label pure))) (right (Tuple (left (Const (label PURE))) (right (Tuple (left (Tuple (left (Const (label sigfun))) (right (Tuple (left (Const (label realconst))) (right (Tuple (left (Const (real 0.0))) (right (null)))))))) (right (null)))))))) (right (null)))))))))))))) (right (Tuple (left (Const (label t))) (right (Tuple (left (Const (label h))) (right (null)))))))))))
generate-ivp-code: sdinfo = ((signal-diagram . #<sfarrow>) (initial-conditions (h realconst 0.1) (t realconst 0.0) (weight neg (* (realsig g (realconst 4.5)) (realsig J (realconst 0.1))))) (params) (dfe (gen weight(t+h306)307 t weight h) (kill t+h306 h t weight) (in h t weight) (out t weight h)) (ivar . t) (hvar . h) (dvars h weight) (pvars) (events) (inputs) (outputs t weight h) (fields))
generate-ivp-code: ic = ((h realconst 0.1) (t realconst 0.0) (weight neg (* (realsig g (realconst 4.5)) (realsig J (realconst 0.1)))))
construct-alsys: dvars = (connection)
generate-alsys-code: lsinfo = ((algebraic-system . #<larrow>) (initial-conditions (epsilon realsig epsilon (realconst 0.1))) (params) (dfe (gen connection) (kill connection) (in epsilon) (out connection)) (dvars connection) (pvars) (fields))
generate-alsys-code: ic = ((epsilon realsig epsilon (realconst 0.1)))
ivp-node-env = ((ivp_InhibitoryPlasticity (ivp-id . ivp_InhibitoryPlasticity) (signal-diagram . #<sfarrow>) (initial-conditions (h realconst 0.1) (t realconst 0.0) (weight neg (* (realsig g (realconst 4.5)) (realsig J (realconst 0.1))))) (params) (dfe (gen weight(t+h306)307 t weight h) (kill t+h306 h t weight) (in h t weight) (out t weight h)) (ivar . t) (hvar . h) (dvars h weight) (pvars) (events) (inputs) (outputs t weight h) (fields)) (ivp_ExcitatoryPlasticity (ivp-id . ivp_ExcitatoryPlasticity) (signal-diagram . #<sfarrow>) (initial-conditions (h realconst 0.1) (t realconst 0.0) (weight realsig J (realconst 0.1))) (params) (dfe (gen weight(t+h296)297 t weight h) (kill t+h296 h t weight) (in h t weight) (out t weight h)) (ivar . t) (hvar . h) (dvars h weight) (pvars) (events) (inputs) (outputs t weight h) (fields)) (ivp_ExternalPlasticity (ivp-id . ivp_ExternalPlasticity) (signal-diagram . #<sfarrow>) (initial-conditions (h realconst 0.1) (t realconst 0.0) (weight realsig J (realconst 0.1))) (params) (dfe (gen weight(t+h286)287 t weight h) (kill t+h286 h t weight) (in h t weight) (out t weight h)) (ivar . t) (hvar . h) (dvars h weight) (pvars) (events) (inputs) (outputs t weight h) (fields)) (ivp_Ext (ivp-id . ivp_Ext) (signal-diagram . #<sfarrow>) (initial-conditions (t_next realconst 0.0) (t realconst 0.0) (spikeOutput realconst -1.0) (h realconst 0.1)) (params (rate * (realconst 1000.0) (* (realsig eta (realconst 0.9)) (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0))))))) (dfe (gen sf257 sf256 t sf254 sf255 t_next) (kill t_next sf255 t sf254) (in spikeOutput rate t h t_next) (out t_next t spikeOutput)) (ivar . t) (hvar . h) (dvars spikeOutput t_next) (pvars rate) (events spikeOutput) (inputs) (outputs t_next t spikeOutput) (fields)) (ivp_I (ivp-id . ivp_I) (signal-diagram . #<sfarrow>) (initial-conditions (spikeOutput realconst -1.0) (t realconst 0.0) (st118 . #f) (t_rpend realconst 0.0) (refractoryEnd realconst -1.0) (V random uniform ()) (h realconst 0.1) (Isyn realconst 0.0)) (params (Vreset realconst 10.0) (tau_rp realconst 2.0) (theta + (realsig theta (realconst 20.0)) (random normal ())) (tau realconst 20.0) (R realconst 100.0)) (dfe (gen sf205 sf204 t_rpend h V t V(t+h188)189 sf186 spikeOutput refractoryEnd sf187 V(t+h195)196 st118) (kill sf204 sf205 spikeOutput sf186 t+h188 R Isyn tau h t theta V refractoryEnd sf187 V(t+h195)196 st118) (in Vreset tau_rp st118 refractoryEnd spikeOutput R Isyn tau h V theta t_rpend t) (out t_rpend h V t st118 spikeOutput refractoryEnd)) (ivar . t) (hvar . h) (dvars st118 refractoryEnd spikeOutput h V t_rpend) (pvars Vreset tau_rp theta tau R) (events spikeOutput spikeOutput) (inputs Isyn) (outputs t_rpend h V t st118 spikeOutput refractoryEnd) (fields (theta + (realsig theta (realconst 20.0)) (random normal ())))) (ivp_E (ivp-id . ivp_E) (signal-diagram . #<sfarrow>) (initial-conditions (spikeOutput realconst -1.0) (t realconst 0.0) (st117 . #f) (t_rpend realconst 0.0) (refractoryEnd realconst -1.0) (V random uniform ()) (h realconst 0.1) (Isyn realconst 0.0)) (params (Vreset realconst 10.0) (tau_rp realconst 2.0) (theta + (realsig theta (realconst 20.0)) (random normal ())) (tau realconst 20.0) (R realconst 100.0)) (dfe (gen sf138 sf137 t_rpend h V t V(t+h121)122 sf119 spikeOutput refractoryEnd sf120 V(t+h128)129 st117) (kill sf137 sf138 spikeOutput sf119 t+h121 R Isyn tau h t theta V refractoryEnd sf120 V(t+h128)129 st117) (in Vreset tau_rp st117 refractoryEnd spikeOutput R Isyn tau h V theta t_rpend t) (out t_rpend h V t st117 spikeOutput refractoryEnd)) (ivar . t) (hvar . h) (dvars st117 refractoryEnd spikeOutput h V t_rpend) (pvars Vreset tau_rp theta tau R) (events spikeOutput spikeOutput) (inputs Isyn) (outputs t_rpend h V t st117 spikeOutput refractoryEnd) (fields (theta + (realsig theta (realconst 20.0)) (random normal ())))))
alsys-node-env = ((RandomUniform (sys-id . RandomUniform) (algebraic-system . #<larrow>) (initial-conditions (epsilon realsig epsilon (realconst 0.1))) (params) (dfe (gen connection) (kill connection) (in epsilon) (out connection)) (dvars connection) (pvars) (fields)))
UL group: BrunelCaseD properties: () populations: ((nml:Population (@ (name Exc)) (nml:Cell (nml:Reference E)) (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Ne))))) (nml:Population (@ (name Inh)) (nml:Cell (nml:Reference I)) (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Ni))))) (nml:Population (@ (name Ext)) (nml:Cell (nml:Reference Ext)) (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Cext)))))) selections: ((nml:Selection (@ (name All neurons)) (nml:Union (nml:Left (nml:Item Exc)) (nml:Right (nml:Item Inh))))) projections: ((nml:Projection (@ (output_event_port spikeOutput) (name External) (input_response_port Ispike) (input_event_port spike) (input_analog_port Isyn)) (nml:source (nml:Reference Ext)) (nml:target (nml:Reference All neurons)) (nml:rule (@ (operator all-to-all))) (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay)))) (nml:plasticity (nml:Reference ExternalPlasticity))) (nml:Projection (@ (output_event_port spikeOutput) (name Excitation) (input_response_port Ispike) (input_event_port spike) (input_analog_port Isyn)) (nml:source (nml:Reference Exc)) (nml:target (nml:Reference All neurons)) (nml:rule (@ (operator for-each)) (nml:Reference RandomUniform) (nml:state connection)) (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay)))) (nml:plasticity (nml:Reference ExcitatoryPlasticity))) (nml:Projection (@ (output_event_port spikeOutput) (name Inhibition) (input_response_port Ispike) (input_event_port spike) (input_analog_port Isyn)) (nml:source (nml:Reference Inh)) (nml:target (nml:Reference All neurons)) (nml:rule (@ (operator for-each)) (nml:Reference RandomUniform) (nml:state connection)) (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay)))) (nml:plasticity (nml:Reference InhibitoryPlasticity))))
eval-ul-property: node = (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Ne))))
eval-source: defs = (Value prop319 = Ne)
eval-property-hook: label = sigfun name = prop319 value = (* (realconst 4.0) (realsig order (realconst 2500.0)))
NineML make-prototype-tenv: ivp-name = ivp_E
NineML make-prototype-tenv: ic = ((spikeOutput realconst -1.0) (t realconst 0.0) (st117 . #f) (t_rpend realconst 0.0) (refractoryEnd realconst -1.0) (V random uniform ()) (h realconst 0.1) (Isyn realconst 0.0)) params = ((Vreset realconst 10.0) (tau_rp realconst 2.0) (theta + (realsig theta (realconst 20.0)) (random normal ())) (tau realconst 20.0) (R realconst 100.0)) inputs = (Isyn)
eval-ul-property: node = (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Ni))))
eval-source: defs = (Value prop320 = Ni)
eval-property-hook: label = sigfun name = prop320 value = (* (realconst 1.0) (realsig order (realconst 2500.0)))
NineML make-prototype-tenv: ivp-name = ivp_I
NineML make-prototype-tenv: ic = ((spikeOutput realconst -1.0) (t realconst 0.0) (st118 . #f) (t_rpend realconst 0.0) (refractoryEnd realconst -1.0) (V random uniform ()) (h realconst 0.1) (Isyn realconst 0.0)) params = ((Vreset realconst 10.0) (tau_rp realconst 2.0) (theta + (realsig theta (realconst 20.0)) (random normal ())) (tau realconst 20.0) (R realconst 100.0)) inputs = (Isyn)
eval-ul-property: node = (nml:Number (nml:Quantity (nml:SingleValue (nml:MathInline Cext))))
eval-source: defs = (Value prop321 = Cext)
eval-property-hook: label = sigfun name = prop321 value = (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))
NineML make-prototype-tenv: ivp-name = ivp_Ext
NineML make-prototype-tenv: ic = ((t_next realconst 0.0) (t realconst 0.0) (spikeOutput realconst -1.0) (h realconst 0.1)) params = ((rate * (realconst 1000.0) (* (realsig eta (realconst 0.9)) (/ (realsig theta (realconst 20.0)) (* (* (realsig J (realconst 0.1)) (* (realsig epsilon (realconst 0.1)) (* (realconst 4.0) (realsig order (realconst 2500.0))))) (realsig tau (realconst 20.0))))))) inputs = ()
eval-ul-property: node = (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay))))
eval-source: defs = (Value prop322 = delay)
eval-property-hook: label = sigfun name = prop322 value = (realsig delay (realconst 1.5))
group-ul-eval: projection node = (nml:Projection (@ (output_event_port spikeOutput) (name External) (input_response_port Ispike) (input_event_port spike) (input_analog_port Isyn)) (nml:source (nml:Reference Ext)) (nml:target (nml:Reference All neurons)) (nml:rule (@ (operator all-to-all))) (nml:Delay (nml:Quantity (nml:SingleValue (nml:MathInline delay)))) (nml:plasticity (nml:Reference ExternalPlasticity)))
group-ul-eval: response = #f response-name = #f
group-ul-eval: delay = (realsig delay 1.5)
group-ul-eval: type = event 
group-ul-eval: plasticity = (nml:plasticity (nml:Reference ExternalPlasticity)) plasticity-name = ExternalPlasticity
group-ul-eval: properties = () 
group-ul-eval: alsys-env = ((RandomUniform (sys-id . RandomUniform) (algebraic-system . #<larrow>) (initial-conditions (epsilon realsig epsilon (realconst 0.1))) (params) (dfe (gen connection) (kill connection) (in epsilon) (out connection)) (dvars connection) (pvars) (fields))) 
NineML make-plasticity-tenv: states = (t h weight) ics = (h t weight)
group-ul-eval: plasticity tenv = ((name . ExternalPlasticity) (ivpFn . ivp_ExternalPlasticity) (states . <list>) (ics . <list>) (initialExprML . {h=(h),t=(0.0),weight=(0.1)}) (initialStateExprML . {h=(0.1),t=(0.0),weight=(0.1)}))

Error: (eval-ul-group) invalid projection target: #f

	Call history:

	ersatz-lib.scm:222: ##sys#check-output-port	  
	ersatz-lib.scm:222: ##sys#print	  
	ersatz-lib.scm:222: datatype#invoke-variant-case	  
	ersatz-lib.scm:222: ##sys#check-output-port	  
	ersatz-lib.scm:222: ##sys#print	  
	ersatz-lib.scm:222: datatype#invoke-variant-case	  
	ersatz-lib.scm:222: ##sys#check-output-port	  
	ersatz-lib.scm:222: ##sys#print	  
	ersatz-lib.scm:222: datatype#invoke-variant-case	  
	ersatz-lib.scm:222: ##sys#check-output-port	  
	ersatz-lib.scm:222: ##sys#print	  
	ersatz-lib.scm:222: datatype#invoke-variant-case	  
	ersatz-lib.scm:222: ##sys#check-output-port	  
	ersatz-lib.scm:222: ##sys#print	  
	network.scm:272: flush-output	  
	network.scm:1355: error	  	<--
