
structure {{group.name}} =
struct

  fun putStrLn out str = 
      (TextIO.output (out, str);
       TextIO.output (out, "\n"))
    
  fun putStr out str = 
      (TextIO.output (out, str))
      
  fun showBoolean b = (if b then "1" else "0")
                      
  fun showReal n = 
      let open StringCvt
	  open Real
      in
	  (if n < 0.0 then "-" else "") ^ (fmt (FIX (SOME 12)) (abs n))
      end
      
  fun foldl1 f lst = let val v = List.hd lst
                         val lst' = List.tl lst
                     in
                         List.foldl f v lst'
                     end

  fun fromDiag (m, n, a, dflt) =
      if Index.validShape [m,n]
      then 
          (let 
               val na  = RTensor.Array.length a
               val na' = na-1
               val te  = RTensor.new ([m,n], dflt)
               fun diag (i, j, ia) =
                   let
                       val ia' = 
                           (RTensor.update (te, [i,j], RTensor.Array.sub (a, ia));
                            if ia = na' then 0 else ia+1)
                   in
                       if (i=0) orelse (j=0) 
                       then te
                       else diag (i-1, j-1, ia)
                   end
           in
               diag (m-1, n-1, 0)
           end)
      else 
          raise RTensor.Shape

  val RandomInit = RandomMTZig.fromEntropy

  val ZigInit = RandomMTZig.ztnew

        
  exception Index        

  val label = "{{group.name}}"
            
  val N = {{group.order}}     (* total population size *)


{% for p in dict (group.properties) %}
  val {{p.name}} = {{p.value.exprML}}

{% endfor %}

{% with timestep = default(group.properties.timestep.exprML, 0.1) %}
  val h = {{ timestep }}
{% endwith %}

  structure TEventPriority = 
  struct
       type priority     = int
       (* Given a delay (positive real number), compute the priority given a time step *)
       fun delayPriority (delay) = Real.round (Real./ (delay, h))
       
       fun compare (x,y) = Int.compare (x,y)
       type item         = real * (int * SparseMatrix.matrix)
       fun priority (x : item) = delayPriority (#1(x))
  end

  structure TEQ = FixTEventQueue (structure P = TEventPriority
                                  type value = (int * SparseMatrix.matrix)
                                  fun value (x : P.item) = (#2(x)))
  val DQ = TEQ.empty

  (* network propagation delays for each projection *)

  val D: real list = 
      [{% for pr in dict (group.projections) %}{{pr.value.delay.exprML}}{% if not loop.last %},{% endif %}{% endfor %}]

  val seed_init = RandomInit() (* seed for randomized initial values *)
  val zt_init   = ZigInit()
  fun random_normal () = RandomMTZig.randNormal(seed_init,zt_init)
  fun random_uniform () = RandomMTZig.randUniform(seed_init)
  fun random_int (imin,imax) = imin + ((imax - imin + 1) * Real.floor(RandomMTZig.randUniform(seed_init)))

{% for pop in dict (group.populations) %}

  val N_{{pop.name}} = {{ pop.value.size }}

  val {{pop.name}}_initial = {{pop.value.prototype.initialExprML}}

{% if pop.value.prototype.fieldExprML %}
  val {{pop.name}}_field_vector = 
    Vector.tabulate (N_{{pop.name}}, fn (i) =>  {{pop.value.prototype.fieldExprML}})
{% endif %}

  val {{pop.name}}_initial_vector = 
    Vector.tabulate (N_{{pop.name}}, fn (i) =>  {{pop.value.prototype.initialStateExprML}})

  val {{pop.name}}_run = Model_{{pop.name}}.{{pop.value.prototype.runExprML}}

  fun {{pop.name}}_run (Wnet,n0) (i,input) =
    let 
        val initial = {{pop.name}}_initial
{% if pop.value.prototype.fieldExprML %}
        val fieldV = Vector.sub ({{pop.name}}_field_vector,i)
{% endif %}

{% if (not (pop.value.prototype.inputs == [])) %}
{% if group.psrtypes %}
        val W = case Wnet of SOME W' => W'
                        | NONE => (List.tabulate ({{length (dict (group.psrtypes))}}, 
                                                  fn (i) => (RTensor.new ([N,1],0.0))))
        val [{% for psr in dict (group.psrtypes) %}{{psr.name}}_i{% if not loop.last %},{% endif %}{% endfor %}] =
            map (fn (W) => RTensor.sub(W,[i+n0,0])) W
        val {{first(pop.value.prototype.inputs)}}_i  = 
            foldl Real.+ 0.0 [{% for psr in dict (group.psrtypes) %}{{psr.name}}_i{% if not loop.last %},{% endif %}{% endfor %}] 
{% else %}
        val {{first(pop.value.prototype.inputs)}}_i  = 
            case Wnet of 
                SOME W => foldl (fn (W,ax) => Real.+ (RTensor.sub(W,[i+n0,0]), ax)) 0.0 W
              | NONE => 0.0

{% endif %}
{% endif %}

        (*val _ = putStrLn TextIO.stdOut ("# {{pop.name}}: t = " ^ (showReal t) ^ " Isyn_i = " ^ (showReal Isyn_i) ^ " V = " ^ (showReal V))*)
        val nstate = {{pop.name}}_f {{ pop.value.prototype.updateStateML }} 
        val nstate' = {{ pop.value.prototype.copyStateML }} 
    in 
        nstate'
    end

{% endfor %}

{% if group.plastypes %}{% for pl in dict (group.plastypes) %}
  val {{pl.name}}_initial = {{pl.value.initialExprML}}

{% endfor %}{% endif %}


{% if group.psrtypes %}{% for psr in dict (group.psrtypes) %}
  val {{psr.name}}_initial = {{psr.value.initialExprML}}

  val {{psr.name}}_initial_vector = Vector.tabulate ({{psr.value.range}}, 
                                                     fn (i) => {{psr.value.initialStateExprML}})

  val {{psr.name}}_f = Model_{{psr.name}}.{{psr.value.ivpFn}}
                             
  fun {{psr.name}}_response W (i,input as { {{ join (",", psr.value.states) }} }) =
    let 
        val initial   = {{psr.name}}_initial
        val weight_i  = RTensor.sub(W,[i,0])
        val spike_i   = if Real.!= (weight_i, 0.0) then 1.0 else ~1.0
        (*val _ = putStrLn TextIO.stdOut ("# {{psr.name}}: t = " ^ (showReal t) ^ " weight_i = " ^ (showReal weight_i)*)
        val nstate  = {{psr.name}}_f {{psr.value.updateStateML}} 
        val nstate' = {{psr.value.copyStateML}} 
    in 
        RTensor.update(W,[i,0],Real.+(RTensor.sub(W,[i,0]),(#{{psr.value.outputState}}(nstate))));
        nstate'
    end
{% endfor %}{% endif %}


{% if group.conntypes %}{% for conn in dict (group.conntypes) %}
{% if conn.value.sysFn %}
  val {{conn.name}}_initial = {{conn.value.initialExprML}}

  val {{conn.name}}_f = Model_{{conn.name}}.{{conn.value.sysFn}}

{% endif %}
{% endfor %}{% endif %}

    val initial = (
{% for pop in dict (group.populations) %}
        {{pop.name}}_initial_vector{% if not loop.last %},{% endif %}

{% endfor %}
    )

    val psr_initial = (
{% if group.psrtypes %}{% for psr in dict (group.psrtypes) %}
        {{psr.name}}_initial_vector{% if not loop.last %},{% endif %}

{% endfor %}{% endif %}
    )


{% for pop in dict (group.populations) %}
    val {{pop.name}}_n0 = {{pop.value.start}}

{% endfor %}

                
    val Pn = [
        {% for pop in dict (group.populations) %}
        {{pop.name}}_n0{% if not loop.last %},{% endif %}

        {% endfor %}
    ]
         
    fun frun I
             (
{% for pop in dict (group.populations) %}
              {{pop.name}}_state_vector{% if not loop.last %},{% endif %}

{% endfor %} ) =
        let
{% for pop in dict (group.populations) %}
            val {{pop.name}}_state_vector' = 
                Vector.mapi ({{pop.name}}_run (I,{{pop.name}}_n0))
                            {{pop.name}}_state_vector

{% endfor %}
        in
            (
{% for pop in dict (group.populations) %}
             {{pop.name}}_state_vector'{% if not loop.last %},{% endif %}

{% endfor %}
            ) 
        end

                         
    fun fresponse I
             (
{% if group.psrtypes %}{% for psr in dict (group.psrtypes) %}
              {{psr.name}}_state_vector{% if not loop.last %},{% endif %}

{% endfor %}{% endif %}
             ) =
        let
            val sub = Unsafe.Real64Array.sub
            val update = Unsafe.Real64Array.update

{% if group.psrtypes %}
            val W = List.tabulate ({{length (dict (group.psrtypes))}}, 
                                   fn (i) => (RTensor.new ([N,1],0.0)))
            val _ = app (fn(wi,w) => 
                            let 
                                val A = RTensor.toArray (List.nth (W,wi))
                            in
                                SparseMatrix.appi (fn([i,_],v) => update (A,i,Real.+ (v, sub(A,i)))) w
                            end) I
{% for psr in dict (group.psrtypes) %}
            val {{psr.name}}_W' = List.nth (W,{{loop.index0}})
            val {{psr.name}}_state_vector' = Vector.mapi ({{psr.name}}_response {{psr.name}}_W') {{psr.name}}_state_vector

{% endfor %}{% else %}
            val W = [RTensor.new ([N,1],0.0)]
            val A = RTensor.toArray (hd(W))

            val _ = app (fn(_,w) => SparseMatrix.appi (fn([i,_],v) => update (A,i,Real.+ (v, sub(A,i)))) w) I
{% endif %}
        in
            (SOME W,
             (
{% if group.psrtypes %}{% for psr in dict (group.psrtypes) %}
              {{psr.name}}_state_vector'{% if not loop.last %},{% endif %}

{% endfor %}{% endif %}
             ))
        end


    fun felec E I 
              ({% for pop in dict (group.populations) %}
              {{pop.name}}_state_vector{% if not loop.last %},{% endif %}
              {% endfor %}) =
        case E of NONE => I
                | SOME E => 
                  let
                    val update = Unsafe.Real64Array.update
                    val I' = case I of SOME I => I
                                     | NONE => RTensor.new ([N,1],0.0)
                    
{% for pr in dict (group.projections) %}
{% if pr.value.type == "continuous" %}
{% for spop in pr.value.source %}
{% for tpop in pr.value.destination %}
                    fun {{spop.name}}_sub i = #({{first (spop.value.prototype.states)}})(Vector.sub ({{spop.name}}_state_vector, i))
                    fun {{tpop.name}}_sub i = #({{first (tpop.value.prototype.states)}})(Vector.sub ({{tpop.name}}_state_vector, i))
                    val _ = Loop.app
                                (0, N_{{spop.name}},
                                 fn (i) => 
                                    let
                                        val Vi = {{spop.name}}_sub i
                                        val sl = SparseMatrix.slice (#{{spop.name}}(E),1,i)
                                    in
                                        SparseMatrix.sliceAppi 
                                            (fn (j,g) => let val Vj = {{tpop.name}}_sub j
                                                         in update (I,i,Real.- (sub(I,i), Real.* (g,Real.- (Vi,Vj)))) end)
                                            sl
                                    end)
                                
{% endfor %}
{% endfor %}
{% endif %}
{% endfor %}
                  in
                      SOME I'
                  end
                         
                         
    fun ftime (
{% for pop in dict (group.populations) %}
              {{pop.name}}_state_vector{% if not loop.last %},{% endif %}

{% endfor %} ) =
        
{% with pop = first (dict (group.populations)) %}
        let 
            val { {{ join (",", pop.value.prototype.states) }} } = Vector.sub ({{pop.name}}_state_vector,0)
        in {{pop.value.prototype.ivar}} end

{% endwith %}
    
        
    fun fspikes (
{% for pop in dict (group.populations) %}
              {{pop.name}}_state_vector{% if not loop.last %},{% endif %}
{% endfor %} ) =

        let
{% for pop in dict (group.populations) %}
            val {{pop.name}}_spike_i = 
                Vector.foldri (fn (i,v as { {{ join (",", pop.value.prototype.states) }} },ax) => 
                               (if (Real.>= (#{{first (pop.value.prototype.events)}}(v), 0.0)) 
                                then ((i+{{pop.name}}_n0,1.0))::ax 
                                else ax))
                              [] {{pop.name}}_state_vector

{% endfor %}

           val ext_spike_i = List.concat ( {% for pop in dict (group.populations) %}{% if not pop.name in group.spikepoplst %}{{pop.name}}_spike_i ::{% endif %}{% endfor %} [] )

                
           val neuron_spike_i = List.concat [ 
{% for name in (group.spikepoplst) %}
                                 {{name}}_spike_i{% if not loop.last %},{% endif %}
{% endfor %}
                                 ]

            val all_spike_i    = List.concat [neuron_spike_i, ext_spike_i]
        in
            (all_spike_i, neuron_spike_i)
        end

{% macro cartesian_product(sp, tp) %}
   {% for s,t in allCombs(sp,tp) %}
   {{ caller(s,t) }}{% if not loop.last %},{% endif %}
   {% endfor %}
{% endmacro %}

{% macro for_each(name, sp, tp, plasticity, component, cstate) %}
             val Pr_{{name}} = let
                                  val weight  = {% if plasticity %}#weight({{plasticity}}_initial){% else %}1.0{% endif %}

                               in
                                  SparseMatrix.fromGeneratorList [N,N]
                                  [
{% call cartesian_product (sp,tp) %}{offset=[{{t.start}},{{s.start}}],
                                       fshape=[{{t.size}},{{s.size}}],
                                       f=(fn (i) => Real.* (weight, #{{cstate}}({{component}}_f {{component}}_initial) ))}{% endcall %}
                                  ]
                               end
{% endmacro %}


{% macro all_to_all(name, sp, tp, plasticity)  %}
             val Pr_{{name}} = let
                                  val weight = {% if plasticity %}#weight({{plasticity}}_initial){% else %}1.0{% endif %}

                               in
                                  SparseMatrix.fromTensorList [N,N]
                                  [
{% call cartesian_product (sp,tp) %}{offset=[{{t.start}},{{s.start}}],
                                     tensor=(RTensor.*> weight (RTensor.new ([{{t.size}},{{s.size}}],1.0))),
                                     sparse=false}{% endcall %}
                                  ]
                                end
{% endmacro %}

{% macro one_to_one(name, sp, tp, plasticity) %}
             val Pr_{{name}} = let
                                  val weight = {% if plasticity %}#weight({{plasticity}}_initial){% else %}1.0{% endif %}

                               in
                                  SparseMatrix.fromTensorList [N,N]
                                  [
{% call cartesian_product (sp,tp) %}{offset=[{{t.start}},{{s.start}}],
                                     tensor=(fromDiag ({{t.size}},{{s.size}},Real64Array.fromList [weight],0.0)),
                                     sparse=true}{% endcall %}
                                  ]
                               end
{% endmacro %}


{% macro from_file(name, sp, tp, filename) %}
             val Pr_{{name}} = let val infile = TextIO.openIn "{{filename}}" 
                                   val S = TensorFile.realTensorRead (infile) 
                                   val _ = TextIO.closeIn infile
                               in 
                                   SparseMatrix.fromTensorSliceList [N,N]
                                   [
                                     {% with %}
                                     {% set soffset = 0 %}
                                     {% for s in sp %}
                                     {% set toffset = 0 %}
                                     {% for t in tp %}
                                     {offset=[{{t.start}},{{s.start}}],
                                      slice=(RTensorSlice.slice ([([{{toffset}},{{soffset}}],[{{toffset}}+{{t.size}}-1,{{soffset}}+{{s.size}}-1])],S)),
                                      sparse=false}{% if not loop.last %},{% endif %}
                                     {% set toffset = toffset + t.size %}
                                     {% endfor %}{% if not loop.last %},{% endif %}
                                     {% set soffset = soffset + s.size %}
                                     {% endfor %}
                                     {% endwith %}
                                  ]
                                end
{% endmacro %}


{% macro preorder(sp, tp) %}
   {% for s in sp %}
   {{ caller(s,tp) }}{% if not loop.last %},{% endif %}
   {% endfor %}
{% endmacro %}


{% macro postorder(sp, tp) %}
   {% for t in tp %}
   {{ caller(sp,t) }}{% if not loop.last %},{% endif %}
   {% endfor %}
{% endmacro %}


{% macro fan_in(name, sp, tp, plasticity, component, cstate) %}
             val Pr_{{name}} = let
                                  val weight  = {% if plasticity %}#weight({{plasticity}}_initial){% else %}1.0{% endif %}

                               in
                                  SparseMatrix.fromMapGeneratorList [N,N]
                                  [
{% call postorder (sp,tp) %}          {offset=[{{t.start}},{{s.start}}],
                                       forder=SparseMatrix.Index.CSR,
                                       fshape=[{{t.size}},{{s.size}}],
                                       f=(fn (i) => Real.* (weight, #{{cstate}}({{component}}_f {{component}}_initial) ))}{% endcall %}
                                  ]
                               end
{% endmacro %}


{% macro fan_out(name, sp, tp, plasticity, component, cstate) %}
             val Pr_{{name}} = let
                                  val weight  = {% if plasticity %}#weight({{plasticity}}_initial){% else %}1.0{% endif %}

                               in
                                  SparseMatrix.fromMapGeneratorList [N,N]
                                  [
{% call preorder (sp,tp) %}         {offset=[{{t.start}},{{s.start}}],
                                     forder=SparseMatrix.Index.CSC,
                                     fshape=[{{t.size}},{{s.size}}],
                                     f=(fn (i) => Real.* (weight, #{{cstate}}({{component}}_f {{component}}_initial) ))}{% endcall %}
                                  ]
                               end
{% endmacro %}


{% macro range_map(name, sp, tp) %}
             val srangemap_{{name}} = 
                                    [
                                     {% with %}
                                     {% set soffset = 0 %}
                                     {% for s in sp %}
                                     {size={{s.size}}
                                      localStart={{soffset}},
                                      globalStart={{s.start}} }{% if not loop.last %},{% endif %}
                                     {% set soffset = soffset + s.size %}
                                     {% endfor %}
                                     {% endwith %}
                                    ]
             val trangemap_{{name}} = 
                                    [
                                     {% with %}
                                     {% set toffset = 0 %}
                                     {% for t in tp %}
                                     {size={{t.size}}
                                      localStart={{toffset}},
                                      globalStart={{t.start}} }{% if not loop.last %},{% endif %}
                                     {% set toffset = toffset + t.size %}
                                     {% endfor %}
                                     {% endwith %}
                                    ]
{% endmacro %}
           
           
    fun fprojection () =
        
        (let
             
{% for pr in dict (group.projections) %}
             val _ = putStrLn TextIO.stdOut "constructing {{pr.name}}"

{% if pr.value.connectivity.type.sysFn %}
{% call for_each(pr.name, 
                 pr.value.source.populations, 
                 pr.value.destination.populations, 
                 pr.value.plasticity,
                 pr.value.connectivity.name,
                 pr.value.connectivity.port) %}
{% endcall %}
{% elseif pr.value.connectivity.type.stdlib == "OneToOne" %}
{% call one_to_one(pr.name, 
                   pr.value.source.populations,
                   pr.value.destination.populations,
                   pr.value.plasticity) %}
{% endcall %}
{% elseif pr.value.connectivity.type.stdlib == "AllToAll" %}
{% call all_to_all(pr.name, 
                   pr.value.source.populations,
                   pr.value.destination.populations,
                   pr.value.plasticity) %}
{% endcall %}
{% elseif pr.value.connectivity.type.stdlib == "FromFile" %}
{% call from_file(pr.name, 
                  pr.value.source.populations,
                  pr.value.destination.populations,
                  pr.value.rule.properties.filename.exprML) %}
{% endcall %}
{% elseif pr.value.connectivity.type.stdlib == "FanIn" %}
{% call fan_in(pr.name, 
               pr.value.source.populations,
               pr.value.destination.populations,
               pr.value.plasticity,
               pr.value.rule.component,
               pr.value.rule.cstate) %}
{% endcall %}
{% elseif pr.value.connectivity.type.stdlib == "FanOut" %}
{% call fan_out(pr.name, 
                pr.value.source.populations,
                pr.value.destination.populations,
                pr.value.plasticity,
                pr.value.rule.component,
                pr.value.rule.cstate) %}
{% endcall %}
{% endif %}
{% endfor %}
                
       
{% if group.psrtypes %}{% for psr in dict (group.psrtypes) %}
{% if psr.value.type == "event" %}
             val S_{{psr.name}} = foldl1 SparseMatrix.insert
                                  ([
{% for pr in psr.value.projections %}
                                    Pr_{{pr}}{% if not loop.last %},{% endif %}

{% endfor %}
                                   ])
{% endif %}
{% endfor %}{% else %}
             val S = foldl1 SparseMatrix.insert
                     ([ 
                       {% for pr in dict (group.projections) %}
                       {% if pr.value.type == "event" %}
                       Pr_{{pr.name}}{% if not loop.last %},{% endif %}
                       {% endif %}
                       {% endfor %}
                     ])
{% endif %}

{% for pr in dict (group.projections) %}
{% if pr.value.type == "continuous" %}
{% call range_map(pr.name, 
                  pr.value.source.populations, 
                  pr.value.destination.populations) %}
{% endcall %}
{% endif %}
{% endfor %}

             val Elst =  
                      [ 
{% for pr in dict (group.projections) %}
                        {% if pr.value.type == "continuous" %}
                          ElecGraph.junctionMatrix ([N,N],ElecGraph.elecGraph ({{pr.name}}(srangemap_{{pr.name}},trangemap_{{pr.name}}))
                          Pr_{{pr.name}}){% if not loop.last %},{% endif %}
                        {% endif %}
{% endfor %}
                      ]

             val E = if List.null Elst then NONE else SOME Elst

             in
              ([
{% if group.psrtypes %}{% for psr in dict (group.psrtypes) %}
               S_{{ psr.name }}{% if not loop.last %},{% endif %}
{% endfor %}{% else %}
               S
{% endif %}
              ])
             end)

end
        
