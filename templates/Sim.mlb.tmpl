$(SML_LIB)/basis/basis.mlb
$(SML_LIB)/basis/mlton.mlb
$(RK_LIB)/rk.mlb
$(RANDMTZIG_LIB)/randmtzig.mlb
$(DYNAMICS_LIB)/dynamics.mlb
$(TENSOR_LIB)/tensor.mlb
$(TENSOR_LIB)/sparse.mlb
$(NINEML_LIB)/priority.mlb

structure Dynamics = FunctionalHybridDynamics1

{% for pop in dict (group.populations) %}
local
    {{pop.value.prototype.name}}.sml
in
    structure {{pop.value.prototype.name}} = Model
end
{% endfor %}
{% if group.conntypes %}{% for conn in dict (group.conntypes) %}
{% if conn.value.sysFn %}
local
    {{conn.value.sysFn}}_solver.sml
in
    structure Model_{{conn.name}} = Model
end
{% endif %}
{% endfor %}{% endif %}

{{group.name}}.sml
Sim{{group.name}}.sml
